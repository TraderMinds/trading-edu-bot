{
  "version": 3,
  "sources": ["../../../src/index.js"],
  "sourceRoot": "C:\\Users\\trader\\Documents\\Projects\\Content-bot\\.wrangler\\tmp\\deploy-kqmrSU",
  "sourcesContent": ["// Cloudflare Worker: scheduled hourly to post trading educational content to Telegram\r\n\r\n// Environment vars expected:\r\n// TELEGRAM_BOT_TOKEN - required\r\n// TELEGRAM_CHAT_ID - required\r\n// OPENROUTER_API_KEY - optional (if provided, worker will call OpenRouter for text generation)\r\n\r\nconst TELEGRAM_API_BASE = 'https://api.telegram.org';\r\nconst MAX_RETRIES = 3;\r\nconst RETRY_DELAY = 1000; // ms\r\n\r\n// Utility function for delays\r\nconst sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// Structured error logging\r\nfunction logError(error, context = {}) {\r\n  console.error(JSON.stringify({\r\n    error: error.message,\r\n    stack: error.stack,\r\n    timestamp: new Date().toISOString(),\r\n    ...context\r\n  }));\r\n}\r\n\r\nasync function fetchWithRetry(url, options, retries = MAX_RETRIES) {\r\n  for (let i = 0; i < retries; i++) {\r\n    try {\r\n      const res = await fetch(url, options);\r\n      if (res.ok) return res;\r\n      \r\n      // Handle rate limits specially\r\n      if (res.status === 429) {\r\n        const retryAfter = res.headers.get('Retry-After') || RETRY_DELAY;\r\n        await sleep(parseInt(retryAfter) * 1000);\r\n        continue;\r\n      }\r\n      \r\n      throw new Error(`HTTP ${res.status}: ${await res.text()}`);\r\n    } catch (err) {\r\n      if (i === retries - 1) throw err;\r\n      await sleep(RETRY_DELAY * Math.pow(2, i)); // Exponential backoff\r\n    }\r\n  }\r\n}\r\n\r\nasync function generateTextWithOpenRouter(prompt, apiKey) {\r\n  if (!apiKey) {\r\n    throw new Error('OpenRouter API key is required');\r\n  }\r\n\r\n  const url = 'https://openrouter.ai/api/v1/chat/completions';\r\n  console.log('Generating content with OpenRouter API key:', apiKey ? 'Present' : 'Missing');\r\n  \r\n  const body = {\r\n    model: 'openai/gpt-oss-20b:free', // Using free OpenAI OSS model\r\n    messages: [\r\n      { \r\n        role: 'system', \r\n        content: `You are an expert trading educator specializing in forex and cryptocurrency markets.\r\n        Create beautifully formatted educational content for Telegram that includes:\r\n\r\n        1. An eye-catching title with emojis\r\n        2. A clear introduction\r\n        3. Main content sections with subheadings\r\n        4. Examples and explanations\r\n        5. Tips and warnings\r\n        6. Action steps\r\n        7. Key takeaways\r\n\r\n        Formatting Guidelines:\r\n        - Use HTML tags for formatting (<b>bold</b>, <u>underline</u>, <i>italic</i>)\r\n        - Use emojis extensively but appropriately\r\n        - Create clear section breaks with emoji dividers\r\n        - Use bullet points and numbered lists where appropriate\r\n        - Format important points in bold\r\n        - Add relevant emojis for each section\r\n        - Keep paragraphs short for mobile readability\r\n        - Use dividers (e.g., \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501) between major sections\r\n\r\n        Minimum length should be 500 words.\r\n        Make it visually appealing and easy to read on mobile devices.`\r\n      },\r\n      { role: 'user', content: prompt }\r\n    ],\r\n    max_tokens: 1500, // Increased token limit for longer content\r\n    temperature: 0.7 // Balanced between creativity and consistency\r\n  };\r\n\r\n  console.log('Making OpenRouter API request with body:', JSON.stringify(body));\r\n  \r\n  try {\r\n    const res = await fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${apiKey}`,\r\n        'HTTP-Referer': 'https://trading-edu-bot-worker.tradermindai.workers.dev',\r\n        'X-Title': 'Trading Education Bot',\r\n        'X-Model': 'openai/gpt-oss-20b:free'\r\n      },\r\n      body: JSON.stringify(body)\r\n    });\r\n\r\n    console.log('OpenRouter API response status:', res.status);\r\n    \r\n    if (!res.ok) {\r\n      const txt = await res.text();\r\n      console.error('OpenRouter API error response:', txt);\r\n      throw new Error(`API error (${res.status}): ${txt}`);\r\n    }\r\n  } catch (fetchError) {\r\n    console.error('OpenRouter API fetch error:', fetchError);\r\n    throw fetchError;\r\n  }\r\n\r\n  try {\r\n    const json = await res.json();\r\n    console.log('OpenRouter API response:', JSON.stringify(json));\r\n    \r\n    // Handle OpenRouter response format\r\n    if (json.choices && json.choices[0] && json.choices[0].message && json.choices[0].message.content) {\r\n      const content = json.choices[0].message.content.trim();\r\n      console.log('Generated content length:', content.length);\r\n      return content;\r\n    }\r\n    \r\n    // Try alternative response shapes\r\n    if (json.output) {\r\n      const content = String(json.output).trim();\r\n      console.log('Generated content length (output):', content.length);\r\n      return content;\r\n    }\r\n    if (json.text) {\r\n      const content = String(json.text).trim();\r\n      console.log('Generated content length (text):', content.length);\r\n      return content;\r\n    }\r\n    \r\n    // If no known response shape matches, log the response and throw error\r\n    console.error('Unexpected API response shape:', JSON.stringify(json));\r\n    throw new Error('Unexpected response format from OpenRouter API');\r\n  } catch (parseError) {\r\n    console.error('Failed to parse API response:', parseError);\r\n    throw new Error('Failed to parse API response');\r\n  }\r\n}\r\n\r\nfunction fallbackText(topic) {\r\n  const tips = [\r\n    // Comprehensive Risk Management Guide\r\n    `\uD83C\uDFAF <b>Ultimate Guide to Risk Management in ${topic} Trading</b> \uD83D\uDCCA\r\n\u23F1 Reading Time: 4 minutes\r\n\r\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 Introduction \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\r\n\r\n\uD83D\uDD0D Understanding risk management is <b>crucial for long-term success</b> in ${topic} trading. In this comprehensive guide, we'll break down the essential components of professional risk management.\r\n\r\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 Core Principles \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\r\n\r\n\uD83D\uDCCC <b>1. Position Sizing Fundamentals</b>\r\n\r\n\u2022 Never risk more than 1-2% per trade\r\n\u2022 Calculate position size based on:\r\n  \u21B3 Account balance\r\n  \u21B3 Stop loss distance\r\n  \u21B3 Market volatility\r\n\r\n\u26A0\uFE0F <b>WARNING:</b> <i>Overleveraging is the #1 reason traders blow their accounts!</i>\r\n\r\n\uD83C\uDFAF <b>2. Strategic Stop Loss Placement</b>\r\n\r\n\u2022 Set stops <u>before</u> entering trades\r\n\u2022 Place at key technical levels:\r\n  \u21B3 Support/Resistance breaks\r\n  \u21B3 Trend line violations\r\n  \u21B3 Pattern invalidation points\r\n\r\n\uD83D\uDCA1 <b>PRO TIP:</b> <i>Add 1-2% buffer for market noise</i>\r\n\r\n\uD83D\uDD04 <b>3. Risk-Reward Optimization</b>\r\n\r\n\u2022 Target minimum 1:2 risk-reward ratio\r\n\u2022 Scale positions intelligently:\r\n  \u21B3 Reduce size after losses\r\n  \u21B3 Increase after verified edge\r\n  \u21B3 Match size to setup quality\r\n\r\n\uD83C\uDFC6 <b>WINNING STRATEGY:</b> <i>Start small, scale up with success</i>\r\n\r\n\uD83D\uDCCA <b>4. Portfolio Risk Management</b>\r\n\r\n\u2022 Monitor correlations between pairs\r\n\u2022 Max portfolio risk: 5-6% total\r\n\u2022 Diversify across:\r\n  \u21B3 Different timeframes\r\n  \u21B3 Multiple strategies\r\n  \u21B3 Uncorrelated assets\r\n\r\n\u26A0\uFE0F <b>CRITICAL:</b> <i>Never risk your entire portfolio on correlated positions!</i>\r\n\r\n\uD83C\uDFAF <b>5. Implementation Checklist</b>\r\n\r\n<b>Before Trading:</b>\r\n\u2713 Calculate max position size\r\n\u2713 Set clear stop loss level\r\n\u2713 Define profit targets\r\n\u2713 Check correlations\r\n\r\n<b>During Trading:</b>\r\n\u2713 Monitor price action\r\n\u2713 Follow your plan\r\n\u2713 No emotional decisions\r\n\r\n<b>After Trading:</b>\r\n\u2713 Document everything\r\n\u2713 Calculate R:R ratio\r\n\u2713 Review performance\r\n\u2713 Update journal\r\n\r\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 Key Takeaways \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\r\n\r\n\uD83C\uDFAF <b>Remember These Points:</b>\r\n\r\n1\uFE0F\u20E3 Position sizing is <u>non-negotiable</u>\r\n2\uFE0F\u20E3 Always know your max loss\r\n3\uFE0F\u20E3 Keep detailed trading records\r\n4\uFE0F\u20E3 Scale positions wisely\r\n5\uFE0F\u20E3 Review and adjust regularly\r\n\r\n\u2B50\uFE0F <b>GOLDEN RULE:</b> <i>Protection of capital comes first, profits second!</i>\r\n\r\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 Action Steps \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\r\n\r\n\uD83D\uDCDD <b>Your Next Steps:</b>\r\n\r\n1. Calculate your per-trade risk limit\r\n2. Create a position sizing spreadsheet\r\n3. Start your trading journal today\r\n4. Review your last 10 trades\r\n5. Adjust your risk parameters\r\n\r\n\uD83C\uDF93 <b>Final Thought:</b> <i>Success in ${topic} trading starts with mastering risk management. Start implementing these principles today!</i>\r\n\r\n#Trading #RiskManagement #${topic} #TradingEducation\r\n\r\nRemember: Professional traders focus on risk management first, profits second. Your primary goal should be capital preservation, which enables long-term participation in the markets.`,\r\n\r\n    // Comprehensive Technical Analysis Guide\r\n    `\uD83D\uDCC8 Mastering Technical Analysis in ${topic} Trading\r\n\r\nA comprehensive approach to technical analysis combines multiple timeframes and indicators to identify high-probability trading opportunities. Here's your complete guide:\r\n\r\n1. Multiple Timeframe Analysis\r\n- Higher timeframes (Daily/Weekly): Identify primary trend\r\n- Medium timeframes (4H/1H): Find trading setups\r\n- Lower timeframes (15M/5M): Fine-tune entries\r\n- Always align trades with higher timeframe trend\r\n\r\n2. Key Technical Tools\r\na) Price Action:\r\n   - Support and resistance levels\r\n   - Trend lines and channels\r\n   - Chart patterns\r\n   - Candlestick formations\r\n\r\nb) Indicators:\r\n   - Trend: Moving averages, MACD\r\n   - Momentum: RSI, Stochastic\r\n   - Volume: OBV, Volume Profile\r\n   - Volatility: Bollinger Bands, ATR\r\n\r\n3. Trading Strategy Integration\r\n- Combine price action with indicator confirmation\r\n- Use volume to validate breakouts\r\n- Monitor market structure for trend changes\r\n- Implement multiple confirmation signals\r\n\r\n4. Advanced Concepts\r\n- Order flow analysis\r\n- Market profile and volume profile\r\n- Fibonacci retracements and extensions\r\n- Elliot Wave Theory basics\r\n\r\n5. Practical Implementation\r\nStep 1: Market Analysis\r\n- Check higher timeframe trend\r\n- Identify key support/resistance\r\n- Note significant price levels\r\n\r\nStep 2: Setup Identification\r\n- Look for pattern formation\r\n- Check indicator alignment\r\n- Confirm with volume\r\n\r\nStep 3: Entry Execution\r\n- Wait for pattern completion\r\n- Verify indicator confirmation\r\n- Check risk-reward ratio\r\n\r\nKey Takeaways:\r\n1. Always start with higher timeframe analysis\r\n2. Use multiple confirmation tools\r\n3. Volume confirms price action\r\n4. Patterns repeat across timeframes\r\n5. Risk management trumps perfect entry\r\n\r\nRemember: Technical analysis is a probability tool, not a guarantee. Combine it with proper risk management for best results.`\r\n  ];\r\n  return tips[Math.floor(Math.random() * tips.length)];\r\n}\r\n\r\nfunction getUnsplashImageUrl(keywords) {\r\n  // Use Unsplash Source to get a relevant free image. No API key required.\r\n  // Example: https://source.unsplash.com/1600x900/?crypto,finance\r\n  const q = encodeURIComponent(keywords.join(','));\r\n  return `https://source.unsplash.com/1600x900/?${q}`;\r\n}\r\n\r\nasync function postToTelegram(botToken, chatId, caption, imageUrl) {\r\n  const endpoint = `${TELEGRAM_API_BASE}/bot${botToken}/sendPhoto`;\r\n  const body = {\r\n    chat_id: chatId,\r\n    photo: imageUrl,\r\n    caption,\r\n    parse_mode: 'HTML'\r\n  };\r\n\r\n  const res = await fetch(endpoint, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(body)\r\n  });\r\n\r\n  const txt = await res.text();\r\n  if (!res.ok) {\r\n    throw new Error(`Telegram API error: ${res.status} ${txt}`);\r\n  }\r\n  return txt;\r\n}\r\n\r\nasync function buildAndSend(env) {\r\n  const botToken = env.TELEGRAM_BOT_TOKEN;\r\n  const chatId = env.TELEGRAM_CHAT_ID;\r\n  if (!botToken || !chatId) throw new Error('Missing TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID');\r\n\r\n  const topic = ['crypto', 'forex'][Math.floor(Math.random() * 2)];\r\n  const prompt = `Write a short educational trading tip for ${topic} traders. Keep it actionable and friendly.`;\r\n\r\n  let caption = '';\r\n  if (env.OPENROUTER_API_KEY) {\r\n    try {\r\n      caption = await generateTextWithOpenRouter(prompt, env.OPENROUTER_API_KEY);\r\n    } catch (err) {\r\n      // fallback to template if AI call fails\r\n      console.error('OpenRouter call failed:', err.message);\r\n      caption = fallbackText(topic);\r\n    }\r\n  } else {\r\n    caption = fallbackText(topic);\r\n  }\r\n\r\n  // Keep caption reasonably short for Telegram messages\r\n  if (caption.length > 1000) caption = caption.slice(0, 990) + '...';\r\n\r\n  // Compose image query keywords\r\n  const imgUrl = getUnsplashImageUrl([topic, 'trading', 'finance']);\r\n\r\n  const sendResult = await postToTelegram(botToken, chatId, caption, imgUrl);\r\n  return sendResult;\r\n}\r\n\r\nexport default {\r\n  async scheduled(event, env, ctx) {\r\n    // Use waitUntil so the scheduled event can finish asynchronously\r\n    ctx.waitUntil((async () => {\r\n      try {\r\n        const res = await buildAndSend(env);\r\n        console.log('Posted to Telegram:', res);\r\n      } catch (err) {\r\n        console.error('Error in scheduled job:', err);\r\n      }\r\n    })());\r\n  },\r\n\r\n  async fetch(request, env) {\r\n    const url = new URL(request.url);\r\n    const path = url.pathname;\r\n\r\n    // Serve UI files\r\n    if (path === '/' || path === '/index.html') {\r\n      // Serve the UI content directly\r\n      const html = `<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Trading Education Bot Control Panel</title>\r\n    <script src=\"https://cdn.tailwindcss.com\"></script>\r\n    <style>\r\n        .loading { display: none; }\r\n        .loading.active { display: block; }\r\n    </style>\r\n</head>\r\n<body class=\"bg-gray-100 p-8\">\r\n    <div id=\"auth-section\" class=\"max-w-md mx-auto bg-white rounded-lg shadow-lg p-6 mb-8\">\r\n        <h2 class=\"text-xl font-semibold mb-4\">Authentication</h2>\r\n        <div class=\"space-y-4\">\r\n            <input type=\"password\" id=\"admin-token\" class=\"w-full p-2 border rounded\" \r\n                   placeholder=\"Enter your admin token\">\r\n            <button id=\"login-btn\" class=\"w-full bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\">\r\n                Login\r\n            </button>\r\n        </div>\r\n    </div>\r\n\r\n    <div id=\"main-content\" class=\"max-w-4xl mx-auto bg-white rounded-lg shadow-lg p-6 hidden\">\r\n        <h1 class=\"text-2xl font-bold mb-6\">Trading Education Bot Control Panel</h1>\r\n        \r\n        <div class=\"mb-8 p-6 border rounded-lg\">\r\n            <h2 class=\"text-xl font-semibold mb-4\">Generate & Post Content</h2>\r\n            \r\n            <form id=\"generateForm\" class=\"space-y-4\">\r\n                <div>\r\n                    <label class=\"block text-sm font-medium mb-2\">Topic/Subject</label>\r\n                    <input type=\"text\" id=\"subject\" class=\"w-full p-2 border rounded\" \r\n                           placeholder=\"e.g., Risk Management in Crypto\">\r\n                </div>\r\n                \r\n                <div>\r\n                    <label class=\"block text-sm font-medium mb-2\">Market Type</label>\r\n                    <select id=\"market\" class=\"w-full p-2 border rounded\">\r\n                        <option value=\"crypto\">Cryptocurrency</option>\r\n                        <option value=\"forex\">Forex</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div>\r\n                    <label class=\"block text-sm font-medium mb-2\">AI Model</label>\r\n                    <select id=\"model\" class=\"w-full p-2 border rounded\">\r\n                        <option value=\"openai/gpt-oss-20b:free\">GPT OSS 20B (Fast & Free)</option>\r\n                        <option value=\"openai/gpt-oss-120b:free\">GPT OSS 120B (Powerful & Free)</option>\r\n                        <option value=\"deepseek/deepseek-chat-v3.1:free\">DeepSeek V3.1 (Advanced & Free)</option>\r\n                        <option value=\"z-ai/glm-4.5-air:free\">GLM 4.5 Air (Efficient & Free)</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div class=\"preview-section hidden mt-4 p-4 bg-gray-50 rounded\">\r\n                    <h3 class=\"font-medium mb-2\">Preview</h3>\r\n                    <p id=\"previewText\" class=\"text-gray-700\"></p>\r\n                </div>\r\n\r\n                <div class=\"flex space-x-4\">\r\n                    <button type=\"button\" id=\"generateBtn\" \r\n                            class=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\">\r\n                        Generate Preview\r\n                    </button>\r\n                    <button type=\"button\" id=\"postBtn\"\r\n                            class=\"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600\">\r\n                        Post to Telegram\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n        <div class=\"mb-8 p-6 border rounded-lg\">\r\n            <h2 class=\"text-xl font-semibold mb-4\">Schedule Management</h2>\r\n            <form id=\"scheduleForm\" class=\"space-y-4\">\r\n                <div>\r\n                    <label class=\"block text-sm font-medium mb-2\">Posting Schedule</label>\r\n                    <select id=\"schedule\" class=\"w-full p-2 border rounded\">\r\n                        <option value=\"0 * * * *\">Every hour</option>\r\n                        <option value=\"0 */2 * * *\">Every 2 hours</option>\r\n                        <option value=\"0 */4 * * *\">Every 4 hours</option>\r\n                        <option value=\"0 */6 * * *\">Every 6 hours</option>\r\n                        <option value=\"0 */12 * * *\">Every 12 hours</option>\r\n                        <option value=\"0 0 * * *\">Once per day</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <button type=\"button\" id=\"updateScheduleBtn\"\r\n                        class=\"bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600\">\r\n                    Update Schedule\r\n                </button>\r\n            </form>\r\n        </div>\r\n\r\n        <div id=\"status\" class=\"mt-4 p-4 rounded hidden\">\r\n            <p class=\"text-center font-medium\"></p>\r\n        </div>\r\n    </div>\r\n\r\n    <script>\r\n        const API_BASE = '/api';\r\n        let generatedContent = '';\r\n\r\n        // Check for saved token\r\n        document.addEventListener('DOMContentLoaded', () => {\r\n            const token = localStorage.getItem('adminToken');\r\n            if (token) {\r\n                document.getElementById('auth-section').classList.add('hidden');\r\n                document.getElementById('main-content').classList.remove('hidden');\r\n            }\r\n        });\r\n\r\n        // Handle login\r\n        document.getElementById('login-btn').addEventListener('click', () => {\r\n            const token = document.getElementById('admin-token').value;\r\n            if (!token) {\r\n                showStatus('Please enter an admin token', 'error');\r\n                return;\r\n            }\r\n            localStorage.setItem('adminToken', token);\r\n            document.getElementById('auth-section').classList.add('hidden');\r\n            document.getElementById('main-content').classList.remove('hidden');\r\n        });\r\n\r\n        async function showStatus(message, type = 'success') {\r\n            const status = document.getElementById('status');\r\n            status.className = \\`mt-4 p-4 rounded \\${type === 'success' ? 'bg-green-100' : 'bg-red-100'}\\`;\r\n            status.querySelector('p').textContent = message;\r\n            status.classList.remove('hidden');\r\n            setTimeout(() => status.classList.add('hidden'), 5000);\r\n        }\r\n\r\n        async function generateContent() {\r\n            const subject = document.getElementById('subject').value;\r\n            const market = document.getElementById('market').value;\r\n            const model = document.getElementById('model').value;\r\n            const token = localStorage.getItem('adminToken');\r\n            \r\n            if (!token) {\r\n                showStatus('Please enter your admin token first', 'error');\r\n                return;\r\n            }\r\n            \r\n            try {\r\n                const response = await fetch(\\`\\${API_BASE}/generate\\`, {\r\n                    method: 'POST',\r\n                    headers: { \r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': 'Bearer ' + token\r\n                    },\r\n                    body: JSON.stringify({ subject, market, model })\r\n                });\r\n\r\n                if (!response.ok) throw new Error('Generation failed');\r\n\r\n                const data = await response.json();\r\n                generatedContent = data.content;\r\n\r\n                document.querySelector('.preview-section').classList.remove('hidden');\r\n                document.getElementById('previewText').textContent = generatedContent;\r\n                showStatus('Content generated successfully');\r\n            } catch (error) {\r\n                showStatus(\\`Failed to generate content: \\${error.message}\\`, 'error');\r\n            }\r\n        }\r\n\r\n        async function postContent() {\r\n            if (!generatedContent) {\r\n                showStatus('Please generate content first', 'error');\r\n                return;\r\n            }\r\n\r\n            const token = localStorage.getItem('adminToken');\r\n            if (!token) {\r\n                showStatus('Please enter your admin token first', 'error');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const response = await fetch(\\`\\${API_BASE}/post\\`, {\r\n                    method: 'POST',\r\n                    headers: { \r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': 'Bearer ' + token\r\n                    },\r\n                    body: JSON.stringify({ content: generatedContent })\r\n                });\r\n\r\n                if (!response.ok) throw new Error('Posting failed');\r\n\r\n                showStatus('Posted successfully to Telegram');\r\n                generatedContent = '';\r\n                document.querySelector('.preview-section').classList.add('hidden');\r\n            } catch (error) {\r\n                showStatus(\\`Failed to post: \\${error.message}\\`, 'error');\r\n            }\r\n        }\r\n\r\n        async function updateSchedule() {\r\n            const schedule = document.getElementById('schedule').value;\r\n            \r\n            const token = localStorage.getItem('adminToken');\r\n            if (!token) {\r\n                showStatus('Please enter your admin token first', 'error');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const response = await fetch(\\`\\${API_BASE}/schedule\\`, {\r\n                    method: 'POST',\r\n                    headers: { \r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': 'Bearer ' + token\r\n                    },\r\n                    body: JSON.stringify({ schedule })\r\n                });\r\n\r\n                if (!response.ok) throw new Error('Schedule update failed');\r\n                showStatus('Schedule updated successfully');\r\n            } catch (error) {\r\n                showStatus(\\`Failed to update schedule: \\${error.message}\\`, 'error');\r\n            }\r\n        }\r\n\r\n        // Event Listeners\r\n        document.getElementById('generateBtn').addEventListener('click', generateContent);\r\n        document.getElementById('postBtn').addEventListener('click', postContent);\r\n        document.getElementById('updateScheduleBtn').addEventListener('click', updateSchedule);\r\n    </script>\r\n</body>\r\n</html>`;\r\n      return new Response(html, { \r\n        headers: { \r\n          'Content-Type': 'text/html',\r\n          'Cache-Control': 'public, max-age=3600'\r\n        } \r\n      });\r\n    }\r\n\r\n    // API Endpoints\r\n    if (path.startsWith('/api/')) {\r\n      // Check admin token for all API endpoints\r\n      const adminToken = request.headers.get('Authorization')?.replace('Bearer ', '');\r\n      if (!adminToken || adminToken !== env.ADMIN_TOKEN) {\r\n        return new Response('Unauthorized', { status: 401 });\r\n      }\r\n\r\n      if (path === '/api/generate' && request.method === 'POST') {\r\n        try {\r\n          // Validate request body\r\n          const { subject, market, model } = await request.json();\r\n          if (!subject || !market || !model) {\r\n            return new Response(JSON.stringify({ error: 'Missing required fields: subject, market, and model are required' }), {\r\n              status: 400,\r\n              headers: { 'Content-Type': 'application/json' }\r\n            });\r\n          }\r\n\r\n          // Generate detailed prompt with formatting instructions\r\n          const prompt = `Create a beautifully formatted educational guide about ${subject} for ${market} traders.\r\n\r\n          Structure the content as follows:\r\n          1. Title Section:\r\n             - Eye-catching title with relevant emojis\r\n             - Brief hook or introduction\r\n             - Reading time estimate\r\n\r\n          2. Main Content:\r\n             - Detailed explanation of ${subject} and its importance in ${market} trading\r\n             - Key concepts and principles\r\n             - Real-world examples with clear explanations\r\n             - Common mistakes to avoid (with warning emojis)\r\n             - Pro tips and advanced strategies\r\n             - Risk management guidelines specific to this topic\r\n\r\n          3. Practical Application:\r\n             - Step-by-step implementation guide\r\n             - Actionable checklist\r\n             - Key metrics to monitor\r\n             - Tools and indicators to use\r\n\r\n          4. Closing:\r\n             - Summary of key points\r\n             - Action steps\r\n             - Motivational closing note\r\n\r\n          Make it visually appealing with:\r\n          - Appropriate emojis for each section\r\n          - Clear formatting (bold, underline, italic)\r\n          - Dividers between sections\r\n          - Bullet points and numbered lists\r\n          - Important points highlighted in bold\r\n          - Warning sections for critical points`;\r\n\r\n          let content = '';\r\n          if (env.OPENROUTER_API_KEY) {\r\n            try {\r\n              content = await generateTextWithOpenRouter(prompt, env.OPENROUTER_API_KEY);\r\n              if (!content) {\r\n                throw new Error('No content generated');\r\n              }\r\n              \r\n              // Additional formatting for Telegram\r\n              content = content\r\n                .replace(/\\n\\s*\\n/g, '\\n\\n') // Standardize spacing\r\n                .replace(/\u2022/g, '\u2022') // Standardize bullet points\r\n                .replace(/---/g, '\\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n') // Nice dividers\r\n                .replace(/\\*(.*?)\\*/g, '<b>$1</b>') // Convert *text* to <b>text</b>\r\n                .replace(/_(.*?)_/g, '<i>$1</i>') // Convert _text_ to <i>text</i>\r\n                .replace(/~(.*?)~/g, '<u>$1</u>'); // Convert ~text~ to <u>text</u>\r\n            } catch (aiError) {\r\n              console.error('AI generation error:', aiError);\r\n              // Fallback to template if AI fails\r\n              content = fallbackText(market);\r\n            }\r\n          } else {\r\n            // If no API key, use fallback\r\n            content = fallbackText(market);\r\n          }\r\n\r\n          return new Response(JSON.stringify({ content }), {\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        } catch (error) {\r\n          console.error('Generation error:', error);\r\n          return new Response(JSON.stringify({ \r\n            error: 'Failed to generate content: ' + (error.message || 'Unknown error') \r\n          }), {\r\n            status: 500,\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        }\r\n      }\r\n\r\n      if (path === '/api/post' && request.method === 'POST') {\r\n        try {\r\n          const { content } = await request.json();\r\n          const imgUrl = getUnsplashImageUrl(['trading', 'finance']);\r\n          await postToTelegram(env.TELEGRAM_BOT_TOKEN, env.TELEGRAM_CHAT_ID, content, imgUrl);\r\n          return new Response(JSON.stringify({ success: true }), {\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        } catch (error) {\r\n          return new Response(JSON.stringify({ error: error.message }), {\r\n            status: 500,\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        }\r\n      }\r\n\r\n      // Return 404 for unknown API endpoints\r\n      return new Response('Not Found', { status: 404 });\r\n    }\r\n\r\n    // Return 404 for unknown paths\r\n    return new Response('Not Found', { status: 404 });\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": ["res"]
}
