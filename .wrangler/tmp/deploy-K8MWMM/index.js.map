{
  "version": 3,
  "sources": ["../../../src/index.js"],
  "sourceRoot": "C:\\Users\\trader\\Documents\\Projects\\Content-bot\\.wrangler\\tmp\\deploy-K8MWMM",
  "sourcesContent": ["// Cloudflare Worker: scheduled hourly to post trading educational content to Telegram\r\n\r\n// Environment vars expected:\r\n// TELEGRAM_BOT_TOKEN - required\r\n// TELEGRAM_CHAT_ID - required\r\n// OPENROUTER_API_KEY - optional (if provided, worker will call OpenRouter for text generation)\r\n\r\nconst TELEGRAM_API_BASE = 'https://api.telegram.org';\r\nconst MAX_RETRIES = 3;\r\nconst RETRY_DELAY = 1000; // ms\r\n\r\n// Utility function for delays\r\nconst sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// Queue management functions using KV storage\r\nasync function getSubjectsQueue(env) {\r\n  try {\r\n    const queue = await env.SUBJECTS_QUEUE?.get('queue');\r\n    return queue ? JSON.parse(queue) : [];\r\n  } catch (error) {\r\n    console.error('Error getting queue:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nasync function getPostFooter(env) {\r\n  try {\r\n    const footer = await env.SUBJECTS_QUEUE?.get('post_footer');\r\n    return footer ? JSON.parse(footer) : {\r\n      companyName: \"TradingBot Pro\",\r\n      telegramChannel: \"@tradingpro\",\r\n      website: \"tradingbot.com\",\r\n      enabled: true\r\n    };\r\n  } catch (error) {\r\n    console.error('Error getting footer:', error);\r\n    return {\r\n      companyName: \"TradingBot Pro\",\r\n      telegramChannel: \"@tradingpro\", \r\n      website: \"tradingbot.com\",\r\n      enabled: true\r\n    };\r\n  }\r\n}\r\n\r\nasync function savePostFooter(env, footerData) {\r\n  try {\r\n    if (env.SUBJECTS_QUEUE) {\r\n      await env.SUBJECTS_QUEUE.put('post_footer', JSON.stringify(footerData));\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error saving footer:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function getPostingStats(env) {\r\n  try {\r\n    const stats = await env.SUBJECTS_QUEUE?.get('posting_stats');\r\n    return stats ? JSON.parse(stats) : {\r\n      totalPosts: 0,\r\n      successfulPosts: 0,\r\n      failedPosts: 0,\r\n      lastPostDate: null,\r\n      postsThisMonth: 0,\r\n      postsThisWeek: 0\r\n    };\r\n  } catch (error) {\r\n    console.error('Error getting stats:', error);\r\n    return {\r\n      totalPosts: 0,\r\n      successfulPosts: 0,\r\n      failedPosts: 0,\r\n      lastPostDate: null,\r\n      postsThisMonth: 0,\r\n      postsThisWeek: 0\r\n    };\r\n  }\r\n}\r\n\r\nasync function updatePostingStats(env, success = true) {\r\n  try {\r\n    const stats = await getPostingStats(env);\r\n    const now = new Date();\r\n    \r\n    stats.totalPosts++;\r\n    if (success) {\r\n      stats.successfulPosts++;\r\n    } else {\r\n      stats.failedPosts++;\r\n    }\r\n    \r\n    stats.lastPostDate = now.toISOString();\r\n    \r\n    // Calculate this month and week posts\r\n    const thisMonth = now.getMonth();\r\n    const thisYear = now.getFullYear();\r\n    const lastPostMonth = stats.lastPostDate ? new Date(stats.lastPostDate).getMonth() : -1;\r\n    const lastPostYear = stats.lastPostDate ? new Date(stats.lastPostDate).getFullYear() : -1;\r\n    \r\n    if (thisMonth !== lastPostMonth || thisYear !== lastPostYear) {\r\n      stats.postsThisMonth = 1;\r\n    } else {\r\n      stats.postsThisMonth++;\r\n    }\r\n    \r\n    // Simple week calculation\r\n    const daysDiff = Math.floor((now - new Date(stats.lastPostDate || 0)) / (1000 * 60 * 60 * 24));\r\n    if (daysDiff > 7) {\r\n      stats.postsThisWeek = 1;\r\n    } else {\r\n      stats.postsThisWeek++;\r\n    }\r\n    \r\n    if (env.SUBJECTS_QUEUE) {\r\n      await env.SUBJECTS_QUEUE.put('posting_stats', JSON.stringify(stats));\r\n    }\r\n    \r\n    return stats;\r\n  } catch (error) {\r\n    console.error('Error updating stats:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function saveSubjectsQueue(env, queue) {\r\n  try {\r\n    if (env.SUBJECTS_QUEUE) {\r\n      await env.SUBJECTS_QUEUE.put('queue', JSON.stringify(queue));\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error saving queue:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function addSubjectToQueue(env, subject, market = 'crypto') {\r\n  const queue = await getSubjectsQueue(env);\r\n  const newItem = {\r\n    id: Date.now().toString(),\r\n    subject: subject.trim(),\r\n    market,\r\n    addedAt: new Date().toISOString(),\r\n    processed: false\r\n  };\r\n  queue.push(newItem);\r\n  await saveSubjectsQueue(env, queue);\r\n  return newItem;\r\n}\r\n\r\nasync function getNextSubject(env) {\r\n  const queue = await getSubjectsQueue(env);\r\n  return queue.find(item => !item.processed) || null;\r\n}\r\n\r\nasync function markSubjectProcessed(env, subjectId) {\r\n  const queue = await getSubjectsQueue(env);\r\n  const item = queue.find(q => q.id === subjectId);\r\n  if (item) {\r\n    item.processed = true;\r\n    item.processedAt = new Date().toISOString();\r\n    await saveSubjectsQueue(env, queue);\r\n  }\r\n}\r\n\r\nasync function removeSubjectFromQueue(env, subjectId) {\r\n  const queue = await getSubjectsQueue(env);\r\n  const filteredQueue = queue.filter(item => item.id !== subjectId);\r\n  await saveSubjectsQueue(env, filteredQueue);\r\n}\r\n\r\n// Structured error logging\r\nfunction logError(error, context = {}) {\r\n  console.error(JSON.stringify({\r\n    error: error.message,\r\n    stack: error.stack,\r\n    timestamp: new Date().toISOString(),\r\n    ...context\r\n  }));\r\n}\r\n\r\nasync function fetchWithRetry(url, options, retries = MAX_RETRIES) {\r\n  for (let i = 0; i < retries; i++) {\r\n    try {\r\n      const res = await fetch(url, options);\r\n      if (res.ok) return res;\r\n      \r\n      // Handle rate limits specially\r\n      if (res.status === 429) {\r\n        const retryAfter = res.headers.get('Retry-After') || RETRY_DELAY;\r\n        await sleep(parseInt(retryAfter) * 1000);\r\n        continue;\r\n      }\r\n      \r\n      throw new Error(`HTTP ${res.status}: ${await res.text()}`);\r\n    } catch (err) {\r\n      if (i === retries - 1) throw err;\r\n      await sleep(RETRY_DELAY * Math.pow(2, i)); // Exponential backoff\r\n    }\r\n  }\r\n}\r\n\r\nasync function generateTextWithOpenRouter(prompt, apiKey, model = 'openai/gpt-oss-20b:free') {\r\n  if (!apiKey) {\r\n    throw new Error('OpenRouter API key is required');\r\n  }\r\n\r\n  const url = 'https://openrouter.ai/api/v1/chat/completions';\r\n  console.log('Generating content with OpenRouter:', {\r\n    hasApiKey: !!apiKey,\r\n    model: model,\r\n    promptLength: prompt.length\r\n  });\r\n\r\n  const body = {\r\n    model: model,\r\n    messages: [\r\n      { \r\n        role: 'system', \r\n        content: `You are an elite trading educator and financial analyst with 20+ years of experience across forex, cryptocurrency, and stock markets. Your mission is to create world-class educational content that transforms beginners into profitable, disciplined traders.\r\n\r\n        \uD83C\uDFAF TELEGRAM POST STRUCTURE (Follow this EXACT format):\r\n\r\n        \uD83D\uDCF1 HEADER SECTION:\r\n        \u2022 Eye-catching title with relevant emojis (max 60 characters)\r\n        \u2022 Quick stats or hook (1-2 lines)\r\n        \u2022 Reading time estimate: \u23F1\uFE0F 3-4 minutes\r\n\r\n        \uD83D\uDD25 HOOK SECTION:\r\n        \u2022 Start with a compelling problem or surprising fact\r\n        \u2022 Use statistics or real market examples\r\n        \u2022 Create urgency or curiosity in 2-3 lines\r\n\r\n        \uD83D\uDCDA MAIN CONTENT (3-4 focused sections):\r\n        \r\n        SECTION 1: Core Concept\r\n        \u2022 Define the main topic clearly\r\n        \u2022 Explain why it matters (2-3 bullet points)\r\n        \u2022 Include 1 specific example with numbers\r\n        \r\n        SECTION 2: Practical Application \r\n        \u2022 Step-by-step implementation guide\r\n        \u2022 Real trading scenarios with specific setups\r\n        \u2022 Common mistakes to avoid\r\n        \r\n        SECTION 3: Advanced Tips\r\n        \u2022 Pro-level insights and techniques  \r\n        \u2022 Market psychology elements\r\n        \u2022 Risk management integration\r\n        \r\n        [OPTIONAL] SECTION 4: Market Context\r\n        \u2022 Current market conditions relevance\r\n        \u2022 Upcoming events or catalysts\r\n        \u2022 Adaptation strategies\r\n\r\n        \uD83C\uDFAF ACTION SECTION:\r\n        \u2022 3-5 immediately actionable steps\r\n        \u2022 Specific tools or resources mentioned\r\n        \u2022 Practice exercises or homework\r\n\r\n        \uD83D\uDCC8 CONCLUSION:\r\n        \u2022 Key takeaway in one powerful sentence\r\n        \u2022 Motivation or mindset advice\r\n        \u2022 Call to action or next learning step\r\n\r\n        \uFFFD TELEGRAM OPTIMIZATION REQUIREMENTS:\r\n\r\n        LENGTH & STRUCTURE:\r\n        \u2022 Total length: 1800-2800 characters (Telegram caption limit)\r\n        \u2022 Use short, punchy sentences (10-15 words max)\r\n        \u2022 Break long concepts into digestible chunks\r\n        \u2022 Each paragraph max 2-3 lines on mobile\r\n\r\n        FORMATTING RULES:\r\n        \u2022 ONLY use: <b>bold</b>, <i>italic</i>, <u>underline</u>, <code>code</code>\r\n        \u2022 NEVER use: <ul>, <ol>, <li>, <p>, <h1-h6>, <br>, <div>, <span>\r\n        \u2022 Use \u2022 for bullet points (never HTML lists)\r\n        \u2022 Use 1., 2., 3. for numbered lists (never HTML)\r\n        \u2022 Section dividers: \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\r\n\r\n        VISUAL HIERARCHY:\r\n        \u2022 Main sections: \uD83D\uDCCA <b>SECTION NAME</b>\r\n        \u2022 Key concepts: <b>Bold for emphasis</b>\r\n        \u2022 Tips: \uD83D\uDCA1 <i>Italicized insights</i>\r\n        \u2022 Warnings: \u26A0\uFE0F <u>Underlined critical points</u>\r\n        \u2022 Code/formulas: <code>Technical terms</code>\r\n\r\n        ENGAGEMENT ELEMENTS:\r\n        \u2022 Strategic emoji usage (enhance, don't overwhelm)\r\n        \u2022 Questions to reader: \"Have you experienced this?\"\r\n        \u2022 Direct address: \"Your next step is...\"\r\n        \u2022 Urgency: \"Start this today\" / \"Don't wait until...\"\r\n\r\n        CONTENT QUALITY STANDARDS:\r\n\r\n        SPECIFICITY:\r\n        \u2022 Include exact numbers: \"Risk 1-2% per trade\" not \"risk a small amount\"\r\n        \u2022 Name specific indicators: \"RSI below 30\" not \"oversold conditions\"  \r\n        \u2022 Give precise timeframes: \"15-minute chart\" not \"short timeframe\"\r\n        \u2022 Reference actual price levels when relevant\r\n\r\n        ACTIONABILITY:\r\n        \u2022 Every tip must be immediately implementable\r\n        \u2022 Provide exact steps, not vague advice\r\n        \u2022 Include tool recommendations when helpful\r\n        \u2022 Give homework or practice exercises\r\n\r\n        EDUCATIONAL DEPTH:\r\n        \u2022 Explain the \"why\" behind each strategy\r\n        \u2022 Connect concepts to market psychology\r\n        \u2022 Show both theory and real-world application\r\n        \u2022 Address different skill levels appropriately\r\n\r\n        MARKET RELEVANCE:\r\n        \u2022 Reference current market conditions when possible\r\n        \u2022 Mention recent examples or case studies\r\n        \u2022 Connect to trending topics or events\r\n        \u2022 Show adaptability across market cycles\r\n\r\n        \uD83E\uDDE0 EXPERT KNOWLEDGE AREAS:\r\n\r\n        TECHNICAL ANALYSIS:\r\n        \u2022 Chart patterns, candlestick analysis, indicator strategies\r\n        \u2022 Multi-timeframe analysis, support/resistance dynamics\r\n        \u2022 Volume analysis, market structure, trend identification\r\n\r\n        RISK MANAGEMENT:\r\n        \u2022 Position sizing formulas, stop-loss strategies\r\n        \u2022 Portfolio theory, correlation analysis, drawdown management\r\n        \u2022 Kelly criterion, risk-reward optimization\r\n\r\n        TRADING PSYCHOLOGY:\r\n        \u2022 Emotional control, discipline building, bias recognition\r\n        \u2022 Performance psychology, stress management\r\n        \u2022 Habit formation, mindset development\r\n\r\n        MARKET DYNAMICS:\r\n        \u2022 Order flow, institutional behavior, market microstructure\r\n        \u2022 Economic indicators, central bank policy, global correlations\r\n        \u2022 Volatility patterns, seasonal effects, market cycles\r\n\r\n        \uD83C\uDFAF SUCCESS METRICS:\r\n        Your content should make readers think: \"This is exactly what I needed to know\" and \"I can implement this right away.\"\r\n\r\n        Focus on transformation, not just information. Build traders who think and act like professionals.`\r\n      },\r\n      { role: 'user', content: prompt }\r\n    ],\r\n    max_tokens: 3500, // Optimized for Telegram post length (was too high at 12000)\r\n    temperature: 0.75, // Balanced creativity and consistency\r\n    top_p: 0.85, // Focused coherence for educational content\r\n    frequency_penalty: 0.3, // Reduce repetition significantly\r\n    presence_penalty: 0.2 // Encourage topic diversity\r\n  };\r\n\r\n  console.log('Making OpenRouter API request with body:', JSON.stringify(body));\r\n  \r\n  try {\r\n    // Add timeout to prevent hanging\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\r\n    \r\n    const res = await fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${apiKey}`,\r\n        'HTTP-Referer': 'https://trading-edu-bot-worker.tradermindai.workers.dev',\r\n        'X-Title': 'Trading Education Bot',\r\n        'X-Model': body.model\r\n      },\r\n      body: JSON.stringify(body),\r\n      signal: controller.signal\r\n    });\r\n    \r\n    clearTimeout(timeoutId);\r\n\r\n    console.log('OpenRouter API response status:', res.status);\r\n    \r\n    if (!res.ok) {\r\n      const txt = await res.text();\r\n      console.error('OpenRouter API error response:', txt);\r\n      throw new Error(`API error (${res.status}): ${txt}`);\r\n    }\r\n\r\n    const json = await res.json();\r\n    console.log('OpenRouter API response:', JSON.stringify(json));\r\n    \r\n    // Handle OpenRouter response format\r\n    if (json.choices && json.choices[0] && json.choices[0].message && json.choices[0].message.content) {\r\n      const content = json.choices[0].message.content.trim();\r\n      console.log('Generated content length:', content.length);\r\n      return content;\r\n    }\r\n    \r\n    // Try alternative response shapes\r\n    if (json.output) {\r\n      const content = String(json.output).trim();\r\n      console.log('Generated content length (output):', content.length);\r\n      return content;\r\n    }\r\n    if (json.text) {\r\n      const content = String(json.text).trim();\r\n      console.log('Generated content length (text):', content.length);\r\n      return content;\r\n    }\r\n    \r\n    // If no known response shape matches, log the response and throw error\r\n    console.error('Unexpected API response shape:', JSON.stringify(json));\r\n    throw new Error('Unexpected response format from OpenRouter API');\r\n  } catch (error) {\r\n    console.error('OpenRouter API error:', {\r\n      name: error.name,\r\n      message: error.message,\r\n      stack: error.stack\r\n    });\r\n    \r\n    // Handle specific error types\r\n    if (error.name === 'AbortError') {\r\n      throw new Error('Request timeout: AI generation took too long (>30s)');\r\n    } else if (error.message.includes('fetch')) {\r\n      throw new Error('Network error: Unable to connect to AI service');\r\n    } else {\r\n      throw new Error(`AI generation failed: ${error.message}`);\r\n    }\r\n  }\r\n}\r\n\r\n// Sanitize content for Telegram HTML parsing\r\nfunction sanitizeForTelegram(content) {\r\n  if (!content) return '';\r\n  \r\n  console.log('Sanitizing content for Telegram, original length:', content.length);\r\n  \r\n  // First, let's fix any obvious HTML issues and convert unsupported tags\r\n  let sanitized = content\r\n    // Convert <ul> and <ol> lists to bullet points\r\n    .replace(/<ul[^>]*>/gi, '')\r\n    .replace(/<\\/ul>/gi, '')\r\n    .replace(/<ol[^>]*>/gi, '')\r\n    .replace(/<\\/ol>/gi, '')\r\n    .replace(/<li[^>]*>/gi, '\u2022 ')\r\n    .replace(/<\\/li>/gi, '\\n')\r\n    \r\n    // Convert <h1-h6> headers to bold text\r\n    .replace(/<h[1-6][^>]*>/gi, '\\n<b>')\r\n    .replace(/<\\/h[1-6]>/gi, '</b>\\n')\r\n    \r\n    // Convert <p> tags to line breaks\r\n    .replace(/<p[^>]*>/gi, '')\r\n    .replace(/<\\/p>/gi, '\\n\\n')\r\n    \r\n    // Convert <br> tags to line breaks\r\n    .replace(/<br\\s*\\/?>/gi, '\\n')\r\n    \r\n    // Convert <strong> to <b>\r\n    .replace(/<strong[^>]*>/gi, '<b>')\r\n    .replace(/<\\/strong>/gi, '</b>')\r\n    \r\n    // Convert <em> to <i>\r\n    .replace(/<em[^>]*>/gi, '<i>')\r\n    .replace(/<\\/em>/gi, '</i>')\r\n    \r\n    // Remove any other unsupported HTML tags while preserving content\r\n    .replace(/<(?!\\/?(b|i|u|s|code|pre|a\\s)[^>]*>)[^>]+>/gi, '');\r\n\r\n  // Fix unmatched HTML tags for Telegram-supported tags (b, i, u, code)\r\n  sanitized = fixUnmatchedTags(sanitized);\r\n    \r\n  // Clean up multiple consecutive newlines\r\n  sanitized = sanitized\r\n    .replace(/\\n{3,}/g, '\\n\\n')\r\n    .replace(/\\s*\\n\\s*/g, '\\n')\r\n    .trim();\r\n  \r\n  console.log('Content sanitized for Telegram, new length:', sanitized.length);\r\n  \r\n  // Log any remaining potentially problematic tags for debugging\r\n  const remainingTags = sanitized.match(/<[^>]+>/g);\r\n  if (remainingTags) {\r\n    console.log('Remaining HTML tags after sanitization:', remainingTags);\r\n  }\r\n  \r\n  return sanitized;\r\n}\r\n\r\n// Fix unmatched HTML tags to ensure proper opening/closing pairs\r\nfunction fixUnmatchedTags(content) {\r\n  // Supported tags in Telegram: b, i, u, code, s, pre, a\r\n  const supportedTags = ['b', 'i', 'u', 'code', 's'];\r\n  \r\n  let fixed = content;\r\n  \r\n  // For each supported tag, ensure proper matching\r\n  supportedTags.forEach(tag => {\r\n    // Count opening and closing tags\r\n    const openingMatches = fixed.match(new RegExp(`<${tag}\\\\b[^>]*>`, 'gi')) || [];\r\n    const closingMatches = fixed.match(new RegExp(`</${tag}>`, 'gi')) || [];\r\n    \r\n    console.log(`Tag ${tag}: ${openingMatches.length} opening, ${closingMatches.length} closing`);\r\n    \r\n    // If unmatched, remove the problematic tags\r\n    if (openingMatches.length !== closingMatches.length) {\r\n      console.warn(`Unmatched ${tag} tags detected, removing all ${tag} tags`);\r\n      // Remove all instances of this tag to prevent parsing errors\r\n      fixed = fixed\r\n        .replace(new RegExp(`<${tag}\\\\b[^>]*>`, 'gi'), '')\r\n        .replace(new RegExp(`</${tag}>`, 'gi'), '');\r\n    }\r\n  });\r\n  \r\n  return fixed;\r\n}\r\n\r\nfunction fallbackText(topic) {\r\n  // No fallback content - just indicate API is not working\r\n  return null;\r\n}\r\n\r\nfunction getUnsplashImageUrl(keywords) {\r\n  // Use Unsplash Source to get a relevant free image. No API key required.\r\n  // Example: https://source.unsplash.com/1600x900/?crypto,finance\r\n  const q = encodeURIComponent(keywords.join(','));\r\n  return `https://source.unsplash.com/1600x900/?${q}`;\r\n}\r\n\r\n// Validate image URL before sending to Telegram\r\nasync function validateImageUrl(imageUrl) {\r\n  console.log('Validating image URL:', imageUrl);\r\n  \r\n  try {\r\n    const response = await fetch(imageUrl, { method: 'HEAD' });\r\n    const contentType = response.headers.get('content-type');\r\n    const contentLength = response.headers.get('content-length');\r\n    \r\n    console.log('Image validation result:', {\r\n      status: response.status,\r\n      contentType,\r\n      contentLength,\r\n      url: imageUrl\r\n    });\r\n    \r\n    // Check if it's actually an image\r\n    if (!contentType || !contentType.startsWith('image/')) {\r\n      console.error('URL does not return an image. Content-Type:', contentType);\r\n      return false;\r\n    }\r\n    \r\n    // Check if image is too large (Telegram has limits)\r\n    if (contentLength && parseInt(contentLength) > 20 * 1024 * 1024) { // 20MB limit\r\n      console.error('Image too large:', contentLength);\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error validating image URL:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Alternative image sources if Unsplash fails\r\nfunction getBackupImageUrl() {\r\n  const backupImages = [\r\n    'https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3?w=1600&h=900&fit=crop&crop=center', // Trading chart\r\n    'https://images.unsplash.com/photo-1590283603385-17ffb3a7f29f?w=1600&h=900&fit=crop&crop=center', // Financial data\r\n    'https://images.unsplash.com/photo-1559526324-4b87b5e36e44?w=1600&h=900&fit=crop&crop=center', // Stock market\r\n    'https://images.unsplash.com/photo-1518186285589-2f7649de83e0?w=1600&h=900&fit=crop&crop=center', // Charts\r\n    'https://images.unsplash.com/photo-1554224155-6726b3ff858f?w=1600&h=900&fit=crop&crop=center'  // Finance\r\n  ];\r\n  \r\n  return backupImages[Math.floor(Math.random() * backupImages.length)];\r\n}\r\n\r\nasync function postToTelegram(botToken, chatId, caption, imageUrl) {\r\n  // Validate parameters\r\n  if (!botToken || !chatId) {\r\n    throw new Error(`Missing required Telegram parameters: botToken=${!!botToken}, chatId=${!!chatId}`);\r\n  }\r\n\r\n  // Validate bot token format\r\n  if (!botToken.includes(':') || botToken.length < 40) {\r\n    throw new Error('Invalid Telegram bot token format');\r\n  }\r\n\r\n  // Validate chat ID format (should be number or string starting with @)\r\n  if (!chatId.toString().match(/^(-?\\d+|@\\w+)$/)) {\r\n    console.warn('Unusual chat ID format:', chatId);\r\n  }\r\n\r\n  console.log('Starting two-step posting process: image first, then full content as reply');\r\n\r\n  // Step 1: Send image with minimal caption\r\n  let imageMessageId;\r\n  try {\r\n    // Image validation and backup selection\r\n    let finalImageUrl = imageUrl;\r\n    const isValidImage = await validateImageUrl(imageUrl);\r\n    if (!isValidImage) {\r\n      console.warn('Original image URL failed validation, using backup');\r\n      finalImageUrl = getBackupImageUrl();\r\n      \r\n      // Validate backup image too\r\n      const isBackupValid = await validateImageUrl(finalImageUrl);\r\n      if (!isBackupValid) {\r\n        console.warn('Backup image also failed, trying another backup');\r\n        finalImageUrl = getBackupImageUrl();\r\n      }\r\n    }\r\n    \r\n    const photoEndpoint = `${TELEGRAM_API_BASE}/bot${botToken}/sendPhoto`;\r\n    \r\n    // Send image with minimal caption\r\n    const imageBody = {\r\n      chat_id: chatId,\r\n      photo: finalImageUrl,\r\n      caption: '\uD83D\uDCCA Trading Education', // Minimal caption\r\n      parse_mode: 'HTML'\r\n    };\r\n\r\n    console.log('Sending image:', {\r\n      endpoint: photoEndpoint.replace(botToken, '[REDACTED]'),\r\n      finalImageUrl: finalImageUrl?.substring(0, 50) + '...',\r\n      chatId: chatId\r\n    });\r\n\r\n    const imageRes = await fetchWithRetry(photoEndpoint, {\r\n      method: 'POST',\r\n      headers: { \r\n        'Content-Type': 'application/json',\r\n        'User-Agent': 'TradingBot/1.0'\r\n      },\r\n      body: JSON.stringify(imageBody)\r\n    });\r\n\r\n    const imageResText = await imageRes.text();\r\n    \r\n    if (!imageRes.ok) {\r\n      console.error('Image posting failed:', imageResText);\r\n      throw new Error(`Image posting failed: ${imageRes.status} - ${imageResText}`);\r\n    }\r\n\r\n    // Parse response to get message ID\r\n    const imageResponseData = JSON.parse(imageResText);\r\n    imageMessageId = imageResponseData.result.message_id;\r\n    console.log('Image posted successfully, message ID:', imageMessageId);\r\n\r\n  } catch (imageError) {\r\n    console.error('Image posting failed, falling back to text-only:', imageError.message);\r\n    \r\n    // If image fails, send full content as regular message\r\n    try {\r\n      const textEndpoint = `${TELEGRAM_API_BASE}/bot${botToken}/sendMessage`;\r\n      const textOnlyBody = {\r\n        chat_id: chatId,\r\n        text: caption || 'Trading Education Content',\r\n        parse_mode: 'HTML'\r\n      };\r\n      \r\n      const textRes = await fetchWithRetry(textEndpoint, {\r\n        method: 'POST',\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'User-Agent': 'TradingBot/1.0'\r\n        },\r\n        body: JSON.stringify(textOnlyBody)\r\n      });\r\n      \r\n      const textResText = await textRes.text();\r\n      if (textRes.ok) {\r\n        console.log('Text-only fallback successful');\r\n        return textResText;\r\n      } else {\r\n        throw new Error(`Text fallback also failed: ${textRes.status} - ${textResText}`);\r\n      }\r\n    } catch (textError) {\r\n      console.error('All posting methods failed:', textError.message);\r\n      throw new Error(`Complete posting failure: ${imageError.message}, ${textError.message}`);\r\n    }\r\n  }\r\n\r\n  // Step 2: Send full educational content as reply to the image\r\n  try {\r\n    const messageEndpoint = `${TELEGRAM_API_BASE}/bot${botToken}/sendMessage`;\r\n    \r\n    const replyBody = {\r\n      chat_id: chatId,\r\n      text: caption || 'Trading Education Content',\r\n      parse_mode: 'HTML',\r\n      reply_to_message_id: imageMessageId\r\n    };\r\n\r\n    console.log('Sending full content as reply:', {\r\n      endpoint: messageEndpoint.replace(botToken, '[REDACTED]'),\r\n      contentLength: caption?.length,\r\n      replyToMessageId: imageMessageId\r\n    });\r\n\r\n    const replyRes = await fetchWithRetry(messageEndpoint, {\r\n      method: 'POST',\r\n      headers: { \r\n        'Content-Type': 'application/json',\r\n        'User-Agent': 'TradingBot/1.0'\r\n      },\r\n      body: JSON.stringify(replyBody)\r\n    });\r\n\r\n    const replyResText = await replyRes.text();\r\n    \r\n    if (!replyRes.ok) {\r\n      console.error('Reply message failed:', replyResText);\r\n      \r\n      // Try sending without HTML if parsing fails\r\n      console.log('Attempting reply without HTML formatting');\r\n      const plainTextBody = {\r\n        chat_id: chatId,\r\n        text: caption.replace(/<[^>]*>/g, '') || 'Trading Education Content',\r\n        reply_to_message_id: imageMessageId\r\n      };\r\n      \r\n      const plainRes = await fetchWithRetry(messageEndpoint, {\r\n        method: 'POST',\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'User-Agent': 'TradingBot/1.0'\r\n        },\r\n        body: JSON.stringify(plainTextBody)\r\n      });\r\n      \r\n      const plainResText = await plainRes.text();\r\n      if (plainRes.ok) {\r\n        console.log('Plain text reply successful');\r\n        return plainResText;\r\n      } else {\r\n        throw new Error(`Reply failed with HTML and plain text: ${replyResText}, ${plainResText}`);\r\n      }\r\n    }\r\n\r\n    console.log('Two-step posting completed successfully');\r\n    return replyResText;\r\n\r\n  } catch (replyError) {\r\n    console.error('Reply message failed:', replyError.message);\r\n    console.log('Image was posted successfully, but reply failed');\r\n    // Return success since image was posted, even if reply failed\r\n    return `Image posted successfully (ID: ${imageMessageId}), but reply failed: ${replyError.message}`;\r\n  }\r\n}\r\n\r\nasync function buildAndSend(env) {\r\n  const botToken = env.TELEGRAM_BOT_TOKEN;\r\n  const chatId = env.TELEGRAM_CHAT_ID;\r\n  if (!botToken || !chatId) throw new Error('Missing TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID');\r\n\r\n  // Check if there's a subject in the queue\r\n  const nextSubject = await getNextSubject(env);\r\n  \r\n  let topic, prompt;\r\n  if (nextSubject) {\r\n    console.log('Processing queued subject:', nextSubject);\r\n    topic = nextSubject.market;\r\n    prompt = `Create an extensive, comprehensive educational guide about \"${nextSubject.subject}\" for ${nextSubject.market} traders. \r\n\r\nInclude the following in your response:\r\n\uD83D\uDCDA **Introduction & Definition**: Clear explanation of the concept\r\n\uD83D\uDCD6 **How it Works**: Step-by-step breakdown of the process\r\n\uD83D\uDCA1 **Key Strategies**: 3-4 practical strategies traders can use\r\n\u26A0\uFE0F **Risk Management**: Important risks and how to mitigate them\r\n\uD83D\uDCC8 **Real-World Examples**: Concrete examples of application\r\n\uD83C\uDFAF **Action Steps**: What traders should do next\r\n\uD83D\uDCAA **Pro Tips**: Advanced insights for better results\r\n\r\nFormat with HTML tags for Telegram (use <b></b> for bold, <i></i> for italics).\r\nAim for 2000-3000 characters to provide comprehensive educational value.\r\nMake it detailed, informative, and highly actionable for serious traders.`;\r\n  } else {\r\n    // Fallback to random topics if queue is empty\r\n    topic = ['crypto', 'forex'][Math.floor(Math.random() * 2)];\r\n    prompt = `Write an extensive educational trading guide for ${topic} traders. \r\n\r\nInclude the following sections:\r\n\uD83D\uDCDA **Topic Overview**: Pick an important trading concept and explain it clearly\r\n\uD83D\uDCD6 **Core Principles**: How the concept works in practice\r\n\uD83D\uDCA1 **Trading Strategies**: 3-4 actionable strategies\r\n\u26A0\uFE0F **Risk Management**: Key risks and mitigation techniques\r\n\uD83D\uDCC8 **Market Examples**: Real scenarios where this applies\r\n\uD83C\uDFAF **Implementation**: Step-by-step action plan\r\n\uD83D\uDCAA **Advanced Tips**: Pro-level insights\r\n\r\nFormat with HTML tags for Telegram (use <b></b> for bold, <i></i> for italics).\r\nAim for 2000-3000 characters to provide comprehensive educational value.\r\nKeep it highly actionable and professional for serious traders.`;\r\n  }\r\n\r\n  let caption = '';\r\n  if (env.OPENROUTER_API_KEY) {\r\n    try {\r\n      // Use a balanced model for scheduled posts\r\n      const scheduledModel = 'deepseek/deepseek-chat-v3.1:free';\r\n      caption = await generateTextWithOpenRouter(prompt, env.OPENROUTER_API_KEY, scheduledModel);\r\n    } catch (err) {\r\n      // AI call failed - don't send anything\r\n      console.error('OpenRouter call failed:', err.message);\r\n      console.log('No fallback content available - skipping post');\r\n      throw new Error(`AI API not working: ${err.message}`);\r\n    }\r\n  } else {\r\n    // No API key - don't send anything\r\n    console.error('No OpenRouter API key configured');\r\n    console.log('No API key available - skipping post');\r\n    throw new Error('OpenRouter API key not configured');\r\n  }\r\n\r\n  // Sanitize caption for Telegram\r\n  caption = sanitizeForTelegram(caption);\r\n\r\n  // Add footer to caption if enabled\r\n  const footer = await getPostFooter(env);\r\n  if (footer.enabled) {\r\n    const footerText = `\\n\\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n\uD83D\uDCC8 <b>${footer.companyName || 'TradingBot Pro'}</b>\\n\uD83D\uDCF1 ${footer.telegramChannel || '@tradingbot'}\\n\uD83C\uDF10 ${footer.website || 'tradingbot.com'}\\n\\n#TradingEducation #${topic.charAt(0).toUpperCase() + topic.slice(1)}Trading\\n\\n<i>~ Your Trading Mentor</i> \u270D\uFE0F`;\r\n    caption += footerText;\r\n  }\r\n\r\n  // Keep content within Telegram message limits (4096 characters for regular messages)\r\n  // Since we're sending as a reply message, we can use the full 4096 character limit\r\n  if (caption.length > 4000) {\r\n    caption = caption.slice(0, 3900) + '...\\n\\n' + (footer.enabled ? `\uD83D\uDCC8 <b>${footer.companyName || 'TradingBot Pro'}</b>\\n\\n<i>~ Your Trading Mentor</i> \u270D\uFE0F` : '');\r\n  }\r\n\r\n  // Compose image query keywords\r\n  const imgUrl = getUnsplashImageUrl([topic, 'trading', 'finance']);\r\n\r\n  console.log('Final caption length:', caption.length);\r\n  console.log('Image URL:', imgUrl);\r\n\r\n  const sendResult = await postToTelegram(botToken, chatId, caption, imgUrl);\r\n  \r\n  // Update posting statistics\r\n  await updatePostingStats(env, true);\r\n  \r\n  // Mark subject as processed and remove from queue if it was from queue\r\n  if (nextSubject) {\r\n    await removeSubjectFromQueue(env, nextSubject.id);\r\n    console.log('Subject processed and removed from queue:', nextSubject.subject);\r\n  }\r\n  \r\n  return sendResult;\r\n}\r\n\r\nexport default {\r\n  async scheduled(event, env, ctx) {\r\n    // Use waitUntil so the scheduled event can finish asynchronously\r\n    ctx.waitUntil((async () => {\r\n      try {\r\n        const res = await buildAndSend(env);\r\n        console.log('Posted to Telegram:', res);\r\n      } catch (err) {\r\n        console.error('Error in scheduled job:', err);\r\n      }\r\n    })());\r\n  },\r\n\r\n  async fetch(request, env) {\r\n    const url = new URL(request.url);\r\n    const path = url.pathname;\r\n\r\n    // Serve UI files\r\n    if (path === '/' || path === '/index.html') {\r\n      // Serve the UI content directly\r\n      const html = `<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Trading Education Bot Control Panel</title>\r\n    <script src=\"https://cdn.tailwindcss.com\"></script>\r\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\" rel=\"stylesheet\">\r\n    <style>\r\n        .loading { display: none; }\r\n        .loading.active { display: block; }\r\n        .progress-bar {\r\n            transition: width 0.3s ease-in-out;\r\n        }\r\n        .card-hover {\r\n            transition: all 0.3s ease;\r\n        }\r\n        .card-hover:hover {\r\n            transform: translateY(-2px);\r\n            box-shadow: 0 10px 25px rgba(0,0,0,0.1);\r\n        }\r\n        .gradient-bg {\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n        }\r\n        .stats-card {\r\n            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\r\n        }\r\n        .success-card {\r\n            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\r\n        }\r\n        .warning-card {\r\n            background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);\r\n        }\r\n        .pulse-animation {\r\n            animation: pulse 2s infinite;\r\n        }\r\n        @keyframes pulse {\r\n            0%, 100% { opacity: 1; }\r\n            50% { opacity: 0.7; }\r\n        }\r\n        .notification {\r\n            animation: slideInRight 0.5s ease-out;\r\n        }\r\n        @keyframes slideInRight {\r\n            from { transform: translateX(100%); opacity: 0; }\r\n            to { transform: translateX(0); opacity: 1; }\r\n        }\r\n    </style>\r\n</head>\r\n<body class=\"bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen\">\r\n    <!-- Loading Overlay -->\r\n    <div id=\"loading-overlay\" class=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden\">\r\n        <div class=\"bg-white p-8 rounded-lg shadow-xl\">\r\n            <div class=\"flex items-center space-x-3\">\r\n                <div class=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n                <span class=\"text-gray-700 font-medium\">Processing...</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- Authentication Section -->\r\n    <div id=\"auth-section\" class=\"min-h-screen flex items-center justify-center p-6\">\r\n        <div class=\"max-w-md w-full\">\r\n            <div class=\"gradient-bg rounded-lg shadow-xl p-8 text-white text-center mb-6\">\r\n                <i class=\"fas fa-chart-line text-4xl mb-4\"></i>\r\n                <h1 class=\"text-2xl font-bold\">Trading Education Bot</h1>\r\n                <p class=\"text-blue-100 mt-2\">Advanced Content Management System</p>\r\n            </div>\r\n            <div class=\"bg-white rounded-lg shadow-xl p-6 card-hover\">\r\n                <h2 class=\"text-xl font-semibold mb-4 text-gray-800\">\r\n                    <i class=\"fas fa-lock mr-2\"></i>Authentication Required\r\n                </h2>\r\n                <div class=\"space-y-4\">\r\n                    <input type=\"password\" id=\"admin-token\" class=\"w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\" \r\n                           placeholder=\"Enter your admin token\">\r\n                    <button id=\"login-btn\" class=\"w-full bg-blue-600 text-white px-4 py-3 rounded-lg hover:bg-blue-700 transition-colors duration-200\">\r\n                        <i class=\"fas fa-sign-in-alt mr-2\"></i>Login\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- Main Content -->\r\n    <div id=\"main-content\" class=\"hidden min-h-screen p-6\">\r\n        <div class=\"max-w-7xl mx-auto\">\r\n            <!-- Header -->\r\n            <div class=\"gradient-bg rounded-lg shadow-xl p-6 text-white mb-6\">\r\n                <div class=\"flex items-center justify-between\">\r\n                    <div>\r\n                        <h1 class=\"text-3xl font-bold flex items-center\">\r\n                            <i class=\"fas fa-robot mr-3\"></i>Trading Education Bot\r\n                        </h1>\r\n                        <p class=\"text-blue-100 mt-1\">Advanced AI-Powered Content Management</p>\r\n                    </div>\r\n                    <button id=\"logout-btn\" class=\"bg-white bg-opacity-20 hover:bg-opacity-30 px-4 py-2 rounded-lg transition-colors duration-200\">\r\n                        <i class=\"fas fa-sign-out-alt mr-2\"></i>Logout\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Statistics Dashboard -->\r\n            <div id=\"stats-section\" class=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\r\n                <div class=\"stats-card rounded-lg shadow-lg p-6 text-white card-hover\">\r\n                    <div class=\"flex items-center justify-between\">\r\n                        <div>\r\n                            <p class=\"text-pink-100\">Total Posts</p>\r\n                            <p id=\"total-posts\" class=\"text-2xl font-bold\">0</p>\r\n                        </div>\r\n                        <i class=\"fas fa-chart-bar text-2xl text-pink-200\"></i>\r\n                    </div>\r\n                </div>\r\n                <div class=\"success-card rounded-lg shadow-lg p-6 text-white card-hover\">\r\n                    <div class=\"flex items-center justify-between\">\r\n                        <div>\r\n                            <p class=\"text-blue-100\">Successful Posts</p>\r\n                            <p id=\"success-posts\" class=\"text-2xl font-bold\">0</p>\r\n                        </div>\r\n                        <i class=\"fas fa-check-circle text-2xl text-blue-200\"></i>\r\n                    </div>\r\n                </div>\r\n                <div class=\"warning-card rounded-lg shadow-lg p-6 text-white card-hover\">\r\n                    <div class=\"flex items-center justify-between\">\r\n                        <div>\r\n                            <p class=\"text-green-100\">Queue Items</p>\r\n                            <p id=\"queue-count\" class=\"text-2xl font-bold\">0</p>\r\n                        </div>\r\n                        <i class=\"fas fa-list text-2xl text-green-200\"></i>\r\n                    </div>\r\n                </div>\r\n                <div class=\"bg-gradient-to-r from-purple-500 to-indigo-600 rounded-lg shadow-lg p-6 text-white card-hover\">\r\n                    <div class=\"flex items-center justify-between\">\r\n                        <div>\r\n                            <p class=\"text-purple-100\">Last Post</p>\r\n                            <p id=\"last-post\" class=\"text-sm font-medium\">Never</p>\r\n                        </div>\r\n                        <i class=\"fas fa-clock text-2xl text-purple-200\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        \r\n            <!-- Main Content Grid -->\r\n            <div class=\"grid grid-cols-1 xl:grid-cols-3 gap-6\">\r\n                <!-- Left Column -->\r\n                <div class=\"xl:col-span-2 space-y-6\">\r\n                    <!-- Future Posts Queue -->\r\n                    <div class=\"bg-white rounded-lg shadow-lg p-6 card-hover\">\r\n                        <div class=\"flex items-center justify-between mb-6\">\r\n                            <h2 class=\"text-xl font-bold text-gray-800 flex items-center\">\r\n                                <i class=\"fas fa-queue mr-2 text-blue-600\"></i>Future Posts Queue\r\n                            </h2>\r\n                            <span id=\"queue-status\" class=\"px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm font-medium\">\r\n                                <i class=\"fas fa-circle text-xs mr-1\"></i>Active\r\n                            </span>\r\n                        </div>\r\n                        \r\n                        <div class=\"space-y-4\">\r\n                            <div class=\"bg-gray-50 p-4 rounded-lg\">\r\n                                <div class=\"flex space-x-4 mb-3\">\r\n                                    <input type=\"text\" id=\"newSubject\" class=\"flex-1 p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\" \r\n                                           placeholder=\"Enter subject for future post (e.g., Technical Analysis Basics)\">\r\n                                    <select id=\"newSubjectMarket\" class=\"p-3 border rounded-lg focus:ring-2 focus:ring-blue-500\">\r\n                                        <option value=\"crypto\">\uD83D\uDCC8 Crypto</option>\r\n                                        <option value=\"forex\">\uD83D\uDCB1 Forex</option>\r\n                                    </select>\r\n                                </div>\r\n                                <div class=\"flex space-x-2\">\r\n                                    <button type=\"button\" id=\"addSubjectBtn\" \r\n                                            class=\"flex-1 bg-blue-600 text-white px-4 py-3 rounded-lg hover:bg-blue-700 transition-colors duration-200\">\r\n                                        <i class=\"fas fa-plus mr-2\"></i>Add to Queue\r\n                                    </button>\r\n                                    <button type=\"button\" id=\"bulkAddBtn\" \r\n                                            class=\"bg-green-600 text-white px-4 py-3 rounded-lg hover:bg-green-700 transition-colors duration-200\">\r\n                                        <i class=\"fas fa-layer-group mr-2\"></i>Bulk Add\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div id=\"queueList\" class=\"space-y-3 max-h-96 overflow-y-auto\">\r\n                                <div class=\"flex items-center justify-center py-8\">\r\n                                    <div class=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n                                    <span class=\"ml-3 text-gray-500\">Loading queue...</span>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"flex space-x-3\">\r\n                                <button type=\"button\" id=\"refreshQueueBtn\" \r\n                                        class=\"bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors duration-200\">\r\n                                    <i class=\"fas fa-sync-alt mr-2\"></i>Refresh\r\n                                </button>\r\n                                <button type=\"button\" id=\"clearQueueBtn\" \r\n                                        class=\"bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors duration-200\">\r\n                                    <i class=\"fas fa-trash mr-2\"></i>Clear All\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Manual Generate & Post -->\r\n                    <div class=\"bg-white rounded-lg shadow-lg p-6 card-hover\">\r\n                        <h2 class=\"text-xl font-bold text-gray-800 mb-6 flex items-center\">\r\n                            <i class=\"fas fa-magic mr-2 text-purple-600\"></i>Manual Generate & Post\r\n                        </h2>\r\n                        \r\n                        <form id=\"generateForm\" class=\"space-y-4\">\r\n                            <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                                <div>\r\n                                    <label class=\"block text-sm font-medium mb-2 text-gray-700\">\r\n                                        <i class=\"fas fa-lightbulb mr-1\"></i>Topic/Subject\r\n                                    </label>\r\n                                    <input type=\"text\" id=\"subject\" class=\"w-full p-3 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent\" \r\n                                           placeholder=\"e.g., Risk Management in Crypto\">\r\n                                </div>\r\n                                \r\n                                <div>\r\n                                    <label class=\"block text-sm font-medium mb-2 text-gray-700\">\r\n                                        <i class=\"fas fa-chart-line mr-1\"></i>Market Type\r\n                                    </label>\r\n                                    <select id=\"market\" class=\"w-full p-3 border rounded-lg focus:ring-2 focus:ring-purple-500\">\r\n                                        <option value=\"crypto\">\uD83D\uDCC8 Cryptocurrency</option>\r\n                                        <option value=\"forex\">\uD83D\uDCB1 Forex</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div>\r\n                                <label class=\"block text-sm font-medium mb-2 text-gray-700\">\r\n                                    <i class=\"fas fa-brain mr-1\"></i>AI Model\r\n                                </label>\r\n                                <select id=\"model\" class=\"w-full p-3 border rounded-lg focus:ring-2 focus:ring-purple-500\">\r\n                                    <optgroup label=\"\uD83C\uDD93 Free Models\">\r\n                                        <option value=\"openai/gpt-oss-120b:free\">\u26A1 GPT OSS 120B - Most Powerful</option>\r\n                                        <option value=\"deepseek/deepseek-chat-v3.1:free\">\uD83E\uDDE0 DeepSeek V3.1 - Advanced Reasoning</option>\r\n                                        <option value=\"nvidia/nemotron-nano-9b-v2:free\">\uD83D\uDD25 NVIDIA Nemotron Nano 9B V2 - Latest</option>\r\n                                        <option value=\"openai/gpt-oss-20b:free\" selected>\uD83D\uDE80 GPT OSS 20B - Fast & Reliable</option>\r\n                                        <option value=\"z-ai/glm-4.5-air:free\">\uD83D\uDCA8 GLM 4.5 Air - Efficient</option>\r\n                                        <option value=\"qwen/qwen3-coder:free\">\uD83D\uDCBB Qwen3 Coder - Code-Optimized</option>\r\n                                    </optgroup>\r\n                                    <optgroup label=\"\uD83C\uDF1F Premium Models\">\r\n                                        <option value=\"openrouter/sonoma-sky-alpha\">\u2601\uFE0F Sonoma Sky Alpha - Creative</option>\r\n                                        <option value=\"openrouter/sonoma-dusk-alpha\">\uD83C\uDF05 Sonoma Dusk Alpha - Balanced</option>\r\n                                    </optgroup>\r\n                                </select>\r\n                                <p class=\"text-xs text-gray-500 mt-1\">\uD83D\uDCA1 Free models have usage limits. Premium models require credits.</p>\r\n                            </div>\r\n\r\n                            <!-- Progress Bar -->\r\n                            <div id=\"generation-progress\" class=\"hidden\">\r\n                                <div class=\"flex items-center justify-between mb-2\">\r\n                                    <span class=\"text-sm font-medium text-gray-700\">Generating content...</span>\r\n                                    <span id=\"progress-percent\" class=\"text-sm text-gray-500\">0%</span>\r\n                                </div>\r\n                                <div class=\"w-full bg-gray-200 rounded-full h-2\">\r\n                                    <div id=\"progress-bar\" class=\"progress-bar bg-blue-600 h-2 rounded-full\" style=\"width: 0%\"></div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div id=\"preview-section\" class=\"hidden mt-4 p-4 bg-gray-50 rounded-lg border\">\r\n                                <h3 class=\"font-medium mb-3 flex items-center text-gray-800\">\r\n                                    <i class=\"fas fa-eye mr-2\"></i>Preview\r\n                                </h3>\r\n                                <div id=\"previewText\" class=\"text-gray-700 max-h-64 overflow-y-auto p-3 bg-white rounded border\"></div>\r\n                                <div class=\"mt-3 text-sm text-gray-500\">\r\n                                    <span id=\"content-stats\"></span>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"flex space-x-3\">\r\n                                <button type=\"button\" id=\"generateBtn\" \r\n                                        class=\"flex-1 bg-purple-600 text-white px-4 py-3 rounded-lg hover:bg-purple-700 transition-colors duration-200\">\r\n                                    <i class=\"fas fa-cog mr-2\"></i>Generate Preview\r\n                                </button>\r\n                                <button type=\"button\" id=\"postBtn\"\r\n                                        class=\"flex-1 bg-green-600 text-white px-4 py-3 rounded-lg hover:bg-green-700 transition-colors duration-200\">\r\n                                    <i class=\"fas fa-paper-plane mr-2\"></i>Post to Telegram\r\n                                </button>\r\n                                <button type=\"button\" id=\"saveTemplateBtn\"\r\n                                        class=\"bg-blue-600 text-white px-4 py-3 rounded-lg hover:bg-blue-700 transition-colors duration-200\">\r\n                                    <i class=\"fas fa-save mr-2\"></i>Save\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Right Column -->\r\n                <div class=\"space-y-6\">\r\n                    <!-- Post Footer Customization -->\r\n                    <div class=\"bg-white rounded-lg shadow-lg p-6 card-hover\">\r\n                        <h2 class=\"text-xl font-bold text-gray-800 mb-6 flex items-center\">\r\n                            <i class=\"fas fa-signature mr-2 text-green-600\"></i>Post Footer Settings\r\n                        </h2>\r\n                        \r\n                        <form id=\"footerForm\" class=\"space-y-4\">\r\n                            <div>\r\n                                <label class=\"flex items-center mb-3\">\r\n                                    <input type=\"checkbox\" id=\"footerEnabled\" class=\"mr-3 h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded\">\r\n                                    <span class=\"text-sm font-medium text-gray-700\">Enable Footer</span>\r\n                                </label>\r\n                            </div>\r\n                            \r\n                            <div>\r\n                                <label class=\"block text-sm font-medium mb-2 text-gray-700\">\r\n                                    <i class=\"fas fa-building mr-1\"></i>Company Name\r\n                                </label>\r\n                                <input type=\"text\" id=\"companyName\" class=\"w-full p-3 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent\" \r\n                                       placeholder=\"e.g., TradingBot Pro\">\r\n                            </div>\r\n                            \r\n                            <div>\r\n                                <label class=\"block text-sm font-medium mb-2 text-gray-700\">\r\n                                    <i class=\"fab fa-telegram mr-1\"></i>Telegram Channel\r\n                                </label>\r\n                                <input type=\"text\" id=\"telegramChannel\" class=\"w-full p-3 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent\" \r\n                                       placeholder=\"e.g., @tradingpro\">\r\n                            </div>\r\n                            \r\n                            <div>\r\n                                <label class=\"block text-sm font-medium mb-2 text-gray-700\">\r\n                                    <i class=\"fas fa-globe mr-1\"></i>Website\r\n                                </label>\r\n                                <input type=\"text\" id=\"website\" class=\"w-full p-3 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent\" \r\n                                       placeholder=\"e.g., tradingbot.com\">\r\n                            </div>\r\n\r\n                            <!-- Footer Preview -->\r\n                            <div class=\"bg-gray-50 p-4 rounded-lg border\">\r\n                                <h4 class=\"text-sm font-medium text-gray-700 mb-2\">Footer Preview:</h4>\r\n                                <div id=\"footerPreview\" class=\"text-sm text-gray-600 font-mono bg-white p-3 rounded border\">\r\n                                    <!-- Footer preview will be populated here -->\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <button type=\"button\" id=\"saveFooterBtn\" \r\n                                    class=\"w-full bg-green-600 text-white px-4 py-3 rounded-lg hover:bg-green-700 transition-colors duration-200\">\r\n                                <i class=\"fas fa-save mr-2\"></i>Save Footer Settings\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n\r\n                    <!-- Schedule Management -->\r\n                    <div class=\"bg-white rounded-lg shadow-lg p-6 card-hover\">\r\n                        <h2 class=\"text-xl font-bold text-gray-800 mb-6 flex items-center\">\r\n                            <i class=\"fas fa-clock mr-2 text-orange-600\"></i>Schedule Management\r\n                        </h2>\r\n                        <form id=\"scheduleForm\" class=\"space-y-4\">\r\n                            <div>\r\n                                <label class=\"block text-sm font-medium mb-2 text-gray-700\">\r\n                                    <i class=\"fas fa-calendar-alt mr-1\"></i>Posting Schedule\r\n                                </label>\r\n                                <select id=\"schedule\" class=\"w-full p-3 border rounded-lg focus:ring-2 focus:ring-orange-500\">\r\n                                    <option value=\"0 * * * *\">\u26A1 Every hour</option>\r\n                                    <option value=\"0 */2 * * *\">\uD83D\uDD50 Every 2 hours</option>\r\n                                    <option value=\"0 */4 * * *\">\uD83D\uDD53 Every 4 hours</option>\r\n                                    <option value=\"0 */6 * * *\">\uD83D\uDD55 Every 6 hours</option>\r\n                                    <option value=\"0 */12 * * *\">\uD83C\uDF13 Every 12 hours</option>\r\n                                    <option value=\"0 0 * * *\">\uD83C\uDF05 Once per day</option>\r\n                                    <option value=\"0 0 * * 1\">\uD83D\uDCC5 Weekly (Monday)</option>\r\n                                </select>\r\n                            </div>\r\n\r\n                            <div class=\"bg-orange-50 p-4 rounded-lg border border-orange-200\">\r\n                                <h4 class=\"text-sm font-medium text-orange-800 mb-2\">Next Scheduled Post:</h4>\r\n                                <p id=\"nextPost\" class=\"text-orange-700 font-mono\">Calculating...</p>\r\n                            </div>\r\n\r\n                            <button type=\"button\" id=\"updateScheduleBtn\"\r\n                                    class=\"w-full bg-orange-600 text-white px-4 py-3 rounded-lg hover:bg-orange-700 transition-colors duration-200\">\r\n                                <i class=\"fas fa-clock mr-2\"></i>Update Schedule\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n\r\n                    <!-- Quick Actions -->\r\n                    <div class=\"bg-white rounded-lg shadow-lg p-6 card-hover\">\r\n                        <h2 class=\"text-xl font-bold text-gray-800 mb-6 flex items-center\">\r\n                            <i class=\"fas fa-bolt mr-2 text-yellow-600\"></i>Quick Actions\r\n                        </h2>\r\n                        <div class=\"space-y-3\">\r\n                            <button id=\"testPostBtn\" class=\"w-full bg-blue-600 text-white px-4 py-3 rounded-lg hover:bg-blue-700 transition-colors duration-200\">\r\n                                <i class=\"fas fa-vial mr-2\"></i>Test Post Now\r\n                            </button>\r\n                            <button id=\"debugBtn\" class=\"w-full bg-orange-600 text-white px-4 py-3 rounded-lg hover:bg-orange-700 transition-colors duration-200\">\r\n                                <i class=\"fas fa-bug mr-2\"></i>Debug Configuration\r\n                            </button>\r\n                            <button id=\"exportQueueBtn\" class=\"w-full bg-indigo-600 text-white px-4 py-3 rounded-lg hover:bg-indigo-700 transition-colors duration-200\">\r\n                                <i class=\"fas fa-download mr-2\"></i>Export Queue\r\n                            </button>\r\n                            <button id=\"importQueueBtn\" class=\"w-full bg-cyan-600 text-white px-4 py-3 rounded-lg hover:bg-cyan-700 transition-colors duration-200\">\r\n                                <i class=\"fas fa-upload mr-2\"></i>Import Queue\r\n                            </button>\r\n                        </div>\r\n                        <input type=\"file\" id=\"importFile\" accept=\".json\" class=\"hidden\">\r\n                    </div>\r\n\r\n                    <!-- Debug Information -->\r\n                    <div id=\"debugPanel\" class=\"bg-white rounded-lg shadow-lg p-6 card-hover hidden\">\r\n                        <h2 class=\"text-xl font-bold text-gray-800 mb-6 flex items-center\">\r\n                            <i class=\"fas fa-microscope mr-2 text-red-600\"></i>Debug Information\r\n                        </h2>\r\n                        <div class=\"space-y-4\">\r\n                            <div class=\"bg-gray-50 p-4 rounded-lg\">\r\n                                <h4 class=\"font-medium text-gray-700 mb-2\">Environment Variables:</h4>\r\n                                <div id=\"envStatus\" class=\"space-y-1 text-sm font-mono\">\r\n                                    <div>TELEGRAM_BOT_TOKEN: <span class=\"loading\">Checking...</span></div>\r\n                                    <div>TELEGRAM_CHAT_ID: <span class=\"loading\">Checking...</span></div>\r\n                                    <div>OPENROUTER_API_KEY: <span class=\"loading\">Checking...</span></div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"bg-gray-50 p-4 rounded-lg\">\r\n                                <h4 class=\"font-medium text-gray-700 mb-2\">Last Error Details:</h4>\r\n                                <pre id=\"lastError\" class=\"text-sm bg-red-50 p-3 rounded border text-red-800 overflow-auto max-h-32\">\r\nNo errors recorded yet\r\n                                </pre>\r\n                            </div>\r\n                            <button id=\"clearDebugBtn\" class=\"w-full bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700\">\r\n                                <i class=\"fas fa-eraser mr-2\"></i>Clear Debug Info\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Notifications Container -->\r\n        <div id=\"notifications\" class=\"fixed top-4 right-4 z-40 space-y-2\"></div>\r\n\r\n        <!-- Bulk Add Modal -->\r\n        <div id=\"bulkModal\" class=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden\">\r\n            <div class=\"bg-white rounded-lg shadow-xl p-6 w-full max-w-md mx-4\">\r\n                <div class=\"flex items-center justify-between mb-4\">\r\n                    <h3 class=\"text-lg font-bold text-gray-800\">Bulk Add Subjects</h3>\r\n                    <button id=\"closeBulkModal\" class=\"text-gray-500 hover:text-gray-700\">\r\n                        <i class=\"fas fa-times\"></i>\r\n                    </button>\r\n                </div>\r\n                <div class=\"space-y-4\">\r\n                    <textarea id=\"bulkSubjects\" rows=\"8\" class=\"w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500\" \r\n                              placeholder=\"Enter one subject per line:&#10;Risk Management Basics&#10;Technical Analysis Guide&#10;Forex Trading Tips\"></textarea>\r\n                    <select id=\"bulkMarket\" class=\"w-full p-3 border rounded-lg\">\r\n                        <option value=\"crypto\">Cryptocurrency</option>\r\n                        <option value=\"forex\">Forex</option>\r\n                    </select>\r\n                    <div class=\"flex space-x-3\">\r\n                        <button id=\"cancelBulkAdd\" class=\"flex-1 bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600\">\r\n                            Cancel\r\n                        </button>\r\n                        <button id=\"confirmBulkAdd\" class=\"flex-1 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\">\r\n                            Add All\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <script>\r\n        const API_BASE = '/api';\r\n        let generatedContent = '';\r\n        let currentFooterSettings = {};\r\n\r\n        // Check for saved token\r\n        document.addEventListener('DOMContentLoaded', () => {\r\n            const token = localStorage.getItem('adminToken');\r\n            if (token) {\r\n                document.getElementById('auth-section').classList.add('hidden');\r\n                document.getElementById('main-content').classList.remove('hidden');\r\n                initializeDashboard();\r\n            }\r\n        });\r\n\r\n        async function initializeDashboard() {\r\n            await Promise.all([\r\n                loadQueue(),\r\n                loadStats(),\r\n                loadFooterSettings(),\r\n                calculateNextPost()\r\n            ]);\r\n            updateFooterPreview();\r\n        }\r\n\r\n        // Handle login\r\n        document.getElementById('login-btn').addEventListener('click', async () => {\r\n            const token = document.getElementById('admin-token').value;\r\n            if (!token) {\r\n                showNotification('Please enter an admin token', 'error');\r\n                return;\r\n            }\r\n            \r\n            showLoading(true);\r\n            localStorage.setItem('adminToken', token);\r\n            document.getElementById('auth-section').classList.add('hidden');\r\n            document.getElementById('main-content').classList.remove('hidden');\r\n            \r\n            try {\r\n                await initializeDashboard();\r\n                showNotification('Welcome back! Dashboard loaded successfully', 'success');\r\n            } catch (error) {\r\n                showNotification('Failed to load dashboard data', 'warning');\r\n            } finally {\r\n                showLoading(false);\r\n            }\r\n        });\r\n\r\n        // Handle logout\r\n        document.addEventListener('click', (e) => {\r\n            if (e.target.id === 'logout-btn') {\r\n                localStorage.removeItem('adminToken');\r\n                document.getElementById('main-content').classList.add('hidden');\r\n                document.getElementById('auth-section').classList.remove('hidden');\r\n                showNotification('Logged out successfully', 'info');\r\n            }\r\n        });\r\n\r\n        async function loadStats() {\r\n            const token = localStorage.getItem('adminToken');\r\n            if (!token) return;\r\n\r\n            try {\r\n                const response = await fetch(\\`\\${API_BASE}/stats\\`, {\r\n                    headers: { 'Authorization': 'Bearer ' + token }\r\n                });\r\n\r\n                if (response.ok) {\r\n                    const data = await response.json();\r\n                    updateStatsDisplay(data.stats);\r\n                }\r\n            } catch (error) {\r\n                console.error('Failed to load stats:', error);\r\n            }\r\n        }\r\n\r\n        function updateStatsDisplay(stats) {\r\n            document.getElementById('total-posts').textContent = stats.totalPosts || 0;\r\n            document.getElementById('success-posts').textContent = stats.successfulPosts || 0;\r\n            \r\n            const lastPost = stats.lastPostDate \r\n                ? new Date(stats.lastPostDate).toLocaleString() \r\n                : 'Never';\r\n            document.getElementById('last-post').textContent = lastPost;\r\n        }\r\n\r\n        function showNotification(message, type = 'success', duration = 5000) {\r\n            const notifications = document.getElementById('notifications');\r\n            const notification = document.createElement('div');\r\n            \r\n            const iconMap = {\r\n                success: 'fas fa-check-circle',\r\n                error: 'fas fa-exclamation-circle',\r\n                warning: 'fas fa-exclamation-triangle',\r\n                info: 'fas fa-info-circle'\r\n            };\r\n            \r\n            const colorMap = {\r\n                success: 'bg-green-500',\r\n                error: 'bg-red-500', \r\n                warning: 'bg-yellow-500',\r\n                info: 'bg-blue-500'\r\n            };\r\n            \r\n            notification.className = \\`notification \\${colorMap[type]} text-white px-6 py-4 rounded-lg shadow-lg flex items-center space-x-3 max-w-sm\\`;\r\n            notification.innerHTML = \\`\r\n                <i class=\"\\${iconMap[type]}\"></i>\r\n                <span class=\"flex-1\">\\${message}</span>\r\n                <button onclick=\"this.parentElement.remove()\" class=\"text-white hover:text-gray-200\">\r\n                    <i class=\"fas fa-times\"></i>\r\n                </button>\r\n            \\`;\r\n            \r\n            notifications.appendChild(notification);\r\n            \r\n            setTimeout(() => {\r\n                if (notification.parentElement) {\r\n                    notification.remove();\r\n                }\r\n            }, duration);\r\n        }\r\n\r\n        function showLoading(show = true) {\r\n            const overlay = document.getElementById('loading-overlay');\r\n            if (show) {\r\n                overlay.classList.remove('hidden');\r\n            } else {\r\n                overlay.classList.add('hidden');\r\n            }\r\n        }\r\n\r\n        function updateProgressBar(percent) {\r\n            const progressBar = document.getElementById('progress-bar');\r\n            const progressPercent = document.getElementById('progress-percent');\r\n            const progressContainer = document.getElementById('generation-progress');\r\n            \r\n            if (percent > 0) {\r\n                progressContainer.classList.remove('hidden');\r\n                progressBar.style.width = percent + '%';\r\n                progressPercent.textContent = Math.round(percent) + '%';\r\n            } else {\r\n                progressContainer.classList.add('hidden');\r\n            }\r\n        }\r\n\r\n        async function generateContent() {\r\n            const subject = document.getElementById('subject').value;\r\n            const market = document.getElementById('market').value;\r\n            const model = document.getElementById('model').value;\r\n            const token = localStorage.getItem('adminToken');\r\n            \r\n            if (!token) {\r\n                showNotification('Please enter your admin token first', 'error');\r\n                return;\r\n            }\r\n\r\n            if (!subject.trim()) {\r\n                showNotification('Please enter a subject', 'warning');\r\n                return;\r\n            }\r\n            \r\n            try {\r\n                // Start progress animation\r\n                updateProgressBar(10);\r\n                const generateBtn = document.getElementById('generateBtn');\r\n                const originalText = generateBtn.innerHTML;\r\n                generateBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i>Generating...';\r\n                generateBtn.disabled = true;\r\n\r\n                // Simulate progress updates\r\n                let progress = 10;\r\n                const progressInterval = setInterval(() => {\r\n                    progress += Math.random() * 20;\r\n                    if (progress > 90) progress = 90;\r\n                    updateProgressBar(progress);\r\n                }, 500);\r\n\r\n                const response = await fetch(\\`\\${API_BASE}/generate\\`, {\r\n                    method: 'POST',\r\n                    headers: { \r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': 'Bearer ' + token\r\n                    },\r\n                    body: JSON.stringify({ subject, market, model })\r\n                });\r\n\r\n                clearInterval(progressInterval);\r\n                updateProgressBar(100);\r\n\r\n                if (!response.ok) throw new Error('Generation failed');\r\n\r\n                const data = await response.json();\r\n                generatedContent = data.content;\r\n\r\n                document.getElementById('preview-section').classList.remove('hidden');\r\n                document.getElementById('previewText').innerHTML = generatedContent;\r\n                \r\n                // Update content stats\r\n                const wordCount = generatedContent.split(' ').length;\r\n                const charCount = generatedContent.length;\r\n                document.getElementById('content-stats').textContent = \r\n                    \\`\\${wordCount} words, \\${charCount} characters\\`;\r\n\r\n                showNotification('Content generated successfully!', 'success');\r\n                \r\n                setTimeout(() => updateProgressBar(0), 1000);\r\n            } catch (error) {\r\n                updateProgressBar(0);\r\n                showNotification(\\`Failed to generate content: \\${error.message}\\`, 'error');\r\n            } finally {\r\n                const generateBtn = document.getElementById('generateBtn');\r\n                generateBtn.innerHTML = originalText;\r\n                generateBtn.disabled = false;\r\n            }\r\n        }\r\n\r\n        async function postContent() {\r\n            if (!generatedContent) {\r\n                showNotification('Please generate content first', 'error');\r\n                return;\r\n            }\r\n\r\n            const token = localStorage.getItem('adminToken');\r\n            if (!token) {\r\n                showNotification('Please enter your admin token first', 'error');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                showLoading(true);\r\n                const response = await fetch(\\`\\${API_BASE}/post\\`, {\r\n                    method: 'POST',\r\n                    headers: { \r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': 'Bearer ' + token\r\n                    },\r\n                    body: JSON.stringify({ content: generatedContent })\r\n                });\r\n\r\n                if (!response.ok) throw new Error('Posting failed');\r\n\r\n                showNotification('Posted successfully to Telegram! \uD83C\uDF89', 'success');\r\n                generatedContent = '';\r\n                document.getElementById('preview-section').classList.add('hidden');\r\n                \r\n                // Refresh stats after successful post\r\n                await loadStats();\r\n            } catch (error) {\r\n                showNotification(\\`Failed to post: \\${error.message}\\`, 'error');\r\n            } finally {\r\n                showLoading(false);\r\n            }\r\n        }\r\n\r\n        async function loadFooterSettings() {\r\n            const token = localStorage.getItem('adminToken');\r\n            if (!token) return;\r\n\r\n            try {\r\n                const response = await fetch(\\`\\${API_BASE}/footer\\`, {\r\n                    headers: { 'Authorization': 'Bearer ' + token }\r\n                });\r\n\r\n                if (response.ok) {\r\n                    const data = await response.json();\r\n                    currentFooterSettings = data.footer;\r\n                    populateFooterForm(data.footer);\r\n                }\r\n            } catch (error) {\r\n                console.error('Failed to load footer settings:', error);\r\n            }\r\n        }\r\n\r\n        function populateFooterForm(footer) {\r\n            document.getElementById('footerEnabled').checked = footer.enabled;\r\n            document.getElementById('companyName').value = footer.companyName || '';\r\n            document.getElementById('telegramChannel').value = footer.telegramChannel || '';\r\n            document.getElementById('website').value = footer.website || '';\r\n        }\r\n\r\n        function updateFooterPreview() {\r\n            const enabled = document.getElementById('footerEnabled').checked;\r\n            const companyName = document.getElementById('companyName').value;\r\n            const telegramChannel = document.getElementById('telegramChannel').value;\r\n            const website = document.getElementById('website').value;\r\n\r\n            const preview = document.getElementById('footerPreview');\r\n            \r\n            if (!enabled) {\r\n                preview.textContent = 'Footer disabled';\r\n                return;\r\n            }\r\n\r\n            const footerText = \\`\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\r\n\uD83D\uDCC8 \\${companyName || 'Company Name'}\r\n\uD83D\uDCF1 \\${telegramChannel || '@channel'}\r\n\uD83C\uDF10 \\${website || 'website.com'}\r\n\r\n#TradingEducation #CryptoTrading\\`;\r\n            \r\n            preview.textContent = footerText;\r\n        }\r\n\r\n        async function saveFooterSettings() {\r\n            const token = localStorage.getItem('adminToken');\r\n            if (!token) return;\r\n\r\n            const footerData = {\r\n                enabled: document.getElementById('footerEnabled').checked,\r\n                companyName: document.getElementById('companyName').value,\r\n                telegramChannel: document.getElementById('telegramChannel').value,\r\n                website: document.getElementById('website').value\r\n            };\r\n\r\n            try {\r\n                showLoading(true);\r\n                const response = await fetch(\\`\\${API_BASE}/footer\\`, {\r\n                    method: 'POST',\r\n                    headers: { \r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': 'Bearer ' + token\r\n                    },\r\n                    body: JSON.stringify({ footer: footerData })\r\n                });\r\n\r\n                if (!response.ok) throw new Error('Failed to save footer settings');\r\n                \r\n                currentFooterSettings = footerData;\r\n                showNotification('Footer settings saved successfully!', 'success');\r\n            } catch (error) {\r\n                showNotification(\\`Failed to save footer settings: \\${error.message}\\`, 'error');\r\n            } finally {\r\n                showLoading(false);\r\n            }\r\n        }\r\n\r\n        // Auto-update footer preview when inputs change\r\n        document.addEventListener('input', (e) => {\r\n            if (['footerEnabled', 'companyName', 'telegramChannel', 'website'].includes(e.target.id)) {\r\n                updateFooterPreview();\r\n            }\r\n        });\r\n\r\n        async function updateSchedule() {\r\n            const schedule = document.getElementById('schedule').value;\r\n            \r\n            const token = localStorage.getItem('adminToken');\r\n            if (!token) {\r\n                showStatus('Please enter your admin token first', 'error');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const response = await fetch(\\`\\${API_BASE}/schedule\\`, {\r\n                    method: 'POST',\r\n                    headers: { \r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': 'Bearer ' + token\r\n                    },\r\n                    body: JSON.stringify({ schedule })\r\n                });\r\n\r\n                if (!response.ok) throw new Error('Schedule update failed');\r\n                showStatus('Schedule updated successfully');\r\n            } catch (error) {\r\n                showStatus(\\`Failed to update schedule: \\${error.message}\\`, 'error');\r\n            }\r\n        }\r\n\r\n        async function loadQueue() {\r\n            const token = localStorage.getItem('adminToken');\r\n            if (!token) return;\r\n\r\n            try {\r\n                const response = await fetch(\\`\\${API_BASE}/queue\\`, {\r\n                    headers: { 'Authorization': 'Bearer ' + token }\r\n                });\r\n\r\n                if (!response.ok) throw new Error('Failed to load queue');\r\n\r\n                const data = await response.json();\r\n                displayQueue(data.queue || []);\r\n            } catch (error) {\r\n                document.getElementById('queueList').innerHTML = \r\n                    '<p class=\"text-red-500\">Failed to load queue</p>';\r\n            }\r\n        }\r\n\r\n        function displayQueue(queue) {\r\n            const queueList = document.getElementById('queueList');\r\n            const queueCount = document.getElementById('queue-count');\r\n            \r\n            queueCount.textContent = queue.length;\r\n            \r\n            if (queue.length === 0) {\r\n                queueList.innerHTML = \\`\r\n                    <div class=\"text-center py-8\">\r\n                        <i class=\"fas fa-inbox text-4xl text-gray-300 mb-3\"></i>\r\n                        <p class=\"text-gray-500\">No subjects in queue</p>\r\n                        <p class=\"text-gray-400 text-sm\">Add some topics to get started!</p>\r\n                    </div>\r\n                \\`;\r\n                return;\r\n            }\r\n\r\n            queueList.innerHTML = queue.map((item, index) => \\`\r\n                <div class=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg border hover:shadow-sm transition-shadow card-hover\">\r\n                    <div class=\"flex-1\">\r\n                        <div class=\"flex items-center space-x-2 mb-1\">\r\n                            <span class=\"bg-blue-100 text-blue-800 text-xs font-medium px-2 py-1 rounded-full\">\r\n                                #\\${index + 1}\r\n                            </span>\r\n                            <span class=\"font-medium text-gray-800\">\\${item.subject}</span>\r\n                        </div>\r\n                        <div class=\"flex items-center space-x-3 text-sm text-gray-500\">\r\n                            <span class=\"flex items-center\">\r\n                                <i class=\"fas fa-chart-line mr-1\"></i>\r\n                                \\${item.market.charAt(0).toUpperCase() + item.market.slice(1)}\r\n                            </span>\r\n                            <span class=\"flex items-center\">\r\n                                <i class=\"fas fa-clock mr-1\"></i>\r\n                                \\${new Date(item.addedAt).toLocaleDateString()}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"flex space-x-2\">\r\n                        <button onclick=\"moveSubjectUp('\\${item.id}')\" \r\n                                class=\"bg-blue-500 text-white p-2 rounded hover:bg-blue-600 transition-colors\"\r\n                                title=\"Move up\">\r\n                            <i class=\"fas fa-arrow-up text-xs\"></i>\r\n                        </button>\r\n                        <button onclick=\"removeSubject('\\${item.id}')\" \r\n                                class=\"bg-red-500 text-white p-2 rounded hover:bg-red-600 transition-colors\"\r\n                                title=\"Remove\">\r\n                            <i class=\"fas fa-trash text-xs\"></i>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            \\`).join('');\r\n        }\r\n\r\n        async function addSubject() {\r\n            const subject = document.getElementById('newSubject').value.trim();\r\n            const market = document.getElementById('newSubjectMarket').value;\r\n            const token = localStorage.getItem('adminToken');\r\n            \r\n            if (!token) {\r\n                showNotification('Please enter your admin token first', 'error');\r\n                return;\r\n            }\r\n\r\n            if (!subject) {\r\n                showNotification('Please enter a subject', 'warning');\r\n                return;\r\n            }\r\n            \r\n            try {\r\n                showLoading(true);\r\n                const response = await fetch(\\`\\${API_BASE}/queue\\`, {\r\n                    method: 'POST',\r\n                    headers: { \r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': 'Bearer ' + token\r\n                    },\r\n                    body: JSON.stringify({ subject, market })\r\n                });\r\n\r\n                if (!response.ok) throw new Error('Failed to add subject');\r\n\r\n                document.getElementById('newSubject').value = '';\r\n                showNotification('Subject added to queue successfully!', 'success');\r\n                await loadQueue();\r\n            } catch (error) {\r\n                showNotification(\\`Failed to add subject: \\${error.message}\\`, 'error');\r\n            } finally {\r\n                showLoading(false);\r\n            }\r\n        }\r\n\r\n        async function bulkAddSubjects() {\r\n            const subjects = document.getElementById('bulkSubjects').value\r\n                .split('\\\\n')\r\n                .map(s => s.trim())\r\n                .filter(s => s.length > 0);\r\n            \r\n            const market = document.getElementById('bulkMarket').value;\r\n            const token = localStorage.getItem('adminToken');\r\n            \r\n            if (!token) return;\r\n            if (subjects.length === 0) {\r\n                showNotification('Please enter at least one subject', 'warning');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                showLoading(true);\r\n                let successCount = 0;\r\n                \r\n                for (const subject of subjects) {\r\n                    try {\r\n                        const response = await fetch(\\`\\${API_BASE}/queue\\`, {\r\n                            method: 'POST',\r\n                            headers: { \r\n                                'Content-Type': 'application/json',\r\n                                'Authorization': 'Bearer ' + token\r\n                            },\r\n                            body: JSON.stringify({ subject, market })\r\n                        });\r\n                        if (response.ok) successCount++;\r\n                    } catch (error) {\r\n                        console.error('Failed to add subject:', subject, error);\r\n                    }\r\n                }\r\n\r\n                document.getElementById('bulkSubjects').value = '';\r\n                document.getElementById('bulkModal').classList.add('hidden');\r\n                showNotification(\\`Added \\${successCount} of \\${subjects.length} subjects successfully!\\`, 'success');\r\n                await loadQueue();\r\n            } catch (error) {\r\n                showNotification(\\`Bulk add failed: \\${error.message}\\`, 'error');\r\n            } finally {\r\n                showLoading(false);\r\n            }\r\n        }\r\n\r\n        async function moveSubjectUp(subjectId) {\r\n            // This would require backend support for reordering\r\n            showNotification('Reordering coming soon!', 'info');\r\n        }\r\n\r\n        async function clearQueue() {\r\n            if (!confirm('Are you sure you want to clear all subjects from the queue?')) return;\r\n            \r\n            const token = localStorage.getItem('adminToken');\r\n            if (!token) return;\r\n\r\n            try {\r\n                showLoading(true);\r\n                const response = await fetch(\\`\\${API_BASE}/queue/clear\\`, {\r\n                    method: 'DELETE',\r\n                    headers: { 'Authorization': 'Bearer ' + token }\r\n                });\r\n\r\n                if (!response.ok) throw new Error('Failed to clear queue');\r\n                \r\n                showNotification('Queue cleared successfully!', 'success');\r\n                await loadQueue();\r\n            } catch (error) {\r\n                showNotification(\\`Failed to clear queue: \\${error.message}\\`, 'error');\r\n            } finally {\r\n                showLoading(false);\r\n            }\r\n        }\r\n\r\n        async function testPost() {\r\n            const token = localStorage.getItem('adminToken');\r\n            if (!token) return;\r\n\r\n            try {\r\n                showLoading(true);\r\n                const response = await fetch(\\`\\${API_BASE}/test-post\\`, {\r\n                    method: 'POST',\r\n                    headers: { 'Authorization': 'Bearer ' + token }\r\n                });\r\n\r\n                const data = await response.json();\r\n                \r\n                if (!response.ok) {\r\n                    // Store the error for debugging\r\n                    document.getElementById('lastError').textContent = \r\n                        \\`Status: \\${response.status}\\nError: \\${data.error}\\nDetails: \\${data.details || 'No additional details'}\\nTimestamp: \\${data.timestamp || new Date().toISOString()}\\`;\r\n                    throw new Error(data.error || 'Test post failed');\r\n                }\r\n                \r\n                showNotification('Test post sent successfully! \uD83D\uDE80', 'success');\r\n                await loadStats();\r\n            } catch (error) {\r\n                console.error('Test post error:', error);\r\n                showNotification(\\`Test post failed: \\${error.message}\\`, 'error');\r\n                \r\n                // Show debug panel automatically on error\r\n                document.getElementById('debugPanel').classList.remove('hidden');\r\n            } finally {\r\n                showLoading(false);\r\n            }\r\n        }\r\n\r\n        async function debugConfiguration() {\r\n            const token = localStorage.getItem('adminToken');\r\n            if (!token) return;\r\n\r\n            try {\r\n                showLoading(true);\r\n                const response = await fetch(\\`\\${API_BASE}/debug\\`, {\r\n                    headers: { 'Authorization': 'Bearer ' + token }\r\n                });\r\n\r\n                const data = await response.json();\r\n                \r\n                if (!response.ok) {\r\n                    throw new Error(data.error || 'Debug check failed');\r\n                }\r\n\r\n                // Update debug panel\r\n                document.getElementById('debugPanel').classList.remove('hidden');\r\n                \r\n                const envStatus = document.getElementById('envStatus');\r\n                envStatus.innerHTML = \\`\r\n                    <div class=\"flex justify-between\">\r\n                        <span>TELEGRAM_BOT_TOKEN:</span> \r\n                        <span class=\"\\${data.environment.hasBotToken ? 'text-green-600' : 'text-red-600'}\">\r\n                            \\${data.environment.hasBotToken ? '\u2713 Set' : '\u2717 Missing'}\r\n                            \\${data.environment.hasBotToken ? \\` (\\${data.environment.botTokenLength} chars, \\${data.environment.botTokenFormat})\\` : ''}\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"flex justify-between\">\r\n                        <span>TELEGRAM_CHAT_ID:</span> \r\n                        <span class=\"\\${data.environment.hasChatId ? 'text-green-600' : 'text-red-600'}\">\r\n                            \\${data.environment.hasChatId ? '\u2713 Set' : '\u2717 Missing'}\r\n                            \\${data.environment.hasChatId ? \\` (\\${data.environment.chatId}, \\${data.environment.chatIdType})\\` : ''}\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"flex justify-between\">\r\n                        <span>OPENROUTER_API_KEY:</span> \r\n                        <span class=\"\\${data.environment.hasOpenRouterKey ? 'text-green-600' : 'text-yellow-600'}\">\r\n                            \\${data.environment.hasOpenRouterKey ? '\u2713 Set' : '\u26A0 Missing (Optional)'}\r\n                            \\${data.environment.hasOpenRouterKey ? \\` (\\${data.environment.openRouterKeyLength} chars)\\` : ''}\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"mt-3 pt-3 border-t\">\r\n                        <div class=\"flex justify-between\">\r\n                            <span>Configuration Status:</span> \r\n                            <span class=\"\\${data.validation.configurationComplete ? 'text-green-600 font-bold' : 'text-red-600 font-bold'}\">\r\n                                \\${data.validation.configurationComplete ? '\u2713 READY' : '\u2717 INCOMPLETE'}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                \\`;\r\n\r\n                // Show configuration instructions if incomplete\r\n                if (!data.validation.configurationComplete) {\r\n                    showNotification('Configuration incomplete! Check the debug panel for details.', 'error', 10000);\r\n                } else {\r\n                    showNotification('Configuration looks good! You can try the test post now.', 'success');\r\n                }\r\n                \r\n            } catch (error) {\r\n                console.error('Debug check error:', error);\r\n                showNotification(\\`Debug check failed: \\${error.message}\\`, 'error');\r\n            } finally {\r\n                showLoading(false);\r\n            }\r\n        }\r\n\r\n        function exportQueue() {\r\n            const token = localStorage.getItem('adminToken');\r\n            if (!token) return;\r\n\r\n            fetch(\\`\\${API_BASE}/queue\\`, {\r\n                headers: { 'Authorization': 'Bearer ' + token }\r\n            })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const blob = new Blob([JSON.stringify(data.queue, null, 2)], { type: 'application/json' });\r\n                const url = URL.createObjectURL(blob);\r\n                const a = document.createElement('a');\r\n                a.href = url;\r\n                a.download = \\`queue-export-\\${new Date().toISOString().split('T')[0]}.json\\`;\r\n                a.click();\r\n                URL.revokeObjectURL(url);\r\n                showNotification('Queue exported successfully!', 'success');\r\n            })\r\n            .catch(error => {\r\n                showNotification(\\`Export failed: \\${error.message}\\`, 'error');\r\n            });\r\n        }\r\n\r\n        function calculateNextPost() {\r\n            const schedule = document.getElementById('schedule').value;\r\n            const nextElement = document.getElementById('nextPost');\r\n            \r\n            // This is a simplified calculation\r\n            const now = new Date();\r\n            let next = new Date(now);\r\n            \r\n            switch(schedule) {\r\n                case '0 * * * *':\r\n                    next.setHours(next.getHours() + 1, 0, 0, 0);\r\n                    break;\r\n                case '0 */2 * * *':\r\n                    next.setHours(next.getHours() + 2, 0, 0, 0);\r\n                    break;\r\n                case '0 */4 * * *':\r\n                    next.setHours(next.getHours() + 4, 0, 0, 0);\r\n                    break;\r\n                default:\r\n                    next.setHours(next.getHours() + 1, 0, 0, 0);\r\n            }\r\n            \r\n            nextElement.textContent = next.toLocaleString();\r\n        }\r\n\r\n        async function removeSubject(id) {\r\n            const token = localStorage.getItem('adminToken');\r\n            if (!token) return;\r\n\r\n            try {\r\n                const response = await fetch(\\`\\${API_BASE}/queue/\\${id}\\`, {\r\n                    method: 'DELETE',\r\n                    headers: { 'Authorization': 'Bearer ' + token }\r\n                });\r\n\r\n                if (!response.ok) throw new Error('Failed to remove subject');\r\n\r\n                showStatus('Subject removed from queue');\r\n                loadQueue();\r\n            } catch (error) {\r\n                showStatus(\\`Failed to remove subject: \\${error.message}\\`, 'error');\r\n            }\r\n        }\r\n\r\n        // Event Listeners\r\n        document.getElementById('generateBtn').addEventListener('click', generateContent);\r\n        document.getElementById('postBtn').addEventListener('click', postContent);\r\n        document.getElementById('updateScheduleBtn').addEventListener('click', updateSchedule);\r\n        document.getElementById('addSubjectBtn').addEventListener('click', addSubject);\r\n        document.getElementById('refreshQueueBtn').addEventListener('click', loadQueue);\r\n        document.getElementById('saveFooterBtn').addEventListener('click', saveFooterSettings);\r\n        document.getElementById('clearQueueBtn').addEventListener('click', clearQueue);\r\n        document.getElementById('testPostBtn').addEventListener('click', testPost);\r\n        document.getElementById('debugBtn').addEventListener('click', debugConfiguration);\r\n        document.getElementById('exportQueueBtn').addEventListener('click', exportQueue);\r\n        document.getElementById('clearDebugBtn').addEventListener('click', () => {\r\n            document.getElementById('lastError').textContent = 'No errors recorded yet';\r\n            document.getElementById('debugPanel').classList.add('hidden');\r\n        });\r\n        \r\n        // Bulk operations\r\n        document.getElementById('bulkAddBtn').addEventListener('click', () => {\r\n            document.getElementById('bulkModal').classList.remove('hidden');\r\n        });\r\n        document.getElementById('closeBulkModal').addEventListener('click', () => {\r\n            document.getElementById('bulkModal').classList.add('hidden');\r\n        });\r\n        document.getElementById('cancelBulkAdd').addEventListener('click', () => {\r\n            document.getElementById('bulkModal').classList.add('hidden');\r\n        });\r\n        document.getElementById('confirmBulkAdd').addEventListener('click', bulkAddSubjects);\r\n\r\n        // Schedule change updates next post time\r\n        document.getElementById('schedule').addEventListener('change', calculateNextPost);\r\n\r\n        // Add Enter key support for adding subjects\r\n        document.getElementById('newSubject').addEventListener('keypress', (e) => {\r\n            if (e.key === 'Enter') {\r\n                addSubject();\r\n            }\r\n        });\r\n\r\n        // Admin token input Enter key support\r\n        document.getElementById('admin-token').addEventListener('keypress', (e) => {\r\n            if (e.key === 'Enter') {\r\n                document.getElementById('login-btn').click();\r\n            }\r\n        });\r\n\r\n        // Close modal when clicking outside\r\n        document.getElementById('bulkModal').addEventListener('click', (e) => {\r\n            if (e.target.id === 'bulkModal') {\r\n                document.getElementById('bulkModal').classList.add('hidden');\r\n            }\r\n        });\r\n    </script>\r\n</body>\r\n</html>`;\r\n      return new Response(html, { \r\n        headers: { \r\n          'Content-Type': 'text/html',\r\n          'Cache-Control': 'public, max-age=3600'\r\n        } \r\n      });\r\n    }\r\n\r\n    // API Endpoints\r\n    if (path.startsWith('/api/')) {\r\n      // Check admin token for all API endpoints\r\n      const adminToken = request.headers.get('Authorization')?.replace('Bearer ', '');\r\n      if (!adminToken || adminToken !== env.ADMIN_TOKEN) {\r\n        return new Response('Unauthorized', { status: 401 });\r\n      }\r\n\r\n      if (path === '/api/generate' && request.method === 'POST') {\r\n        try {\r\n          // Validate request body\r\n          const { subject, market, model } = await request.json();\r\n          if (!subject || !market || !model) {\r\n            return new Response(JSON.stringify({ error: 'Missing required fields: subject, market, and model are required' }), {\r\n              status: 400,\r\n              headers: { 'Content-Type': 'application/json' }\r\n            });\r\n          }\r\n\r\n          // Generate comprehensive prompt based on subject and market\r\n          const prompt = `Create an expert-level educational guide about \"${subject}\" specifically for ${market} trading.\r\n\r\n\uD83C\uDFAF TOPIC FOCUS: ${subject}\r\n\uD83D\uDCB9 MARKET: ${market.charAt(0).toUpperCase() + market.slice(1)}\r\n\uD83D\uDCCA TARGET AUDIENCE: Intermediate to advanced traders seeking actionable insights\r\n\r\n\uD83D\uDCDD CONTENT REQUIREMENTS:\r\n\u2022 Provide deep, actionable insights about ${subject}\r\n\u2022 Include ${market}-specific examples and scenarios\r\n\u2022 Cover both theoretical concepts and practical implementation\r\n\u2022 Address common pitfalls and how to avoid them\r\n\u2022 Include specific metrics, timeframes, and risk parameters\r\n\u2022 Reference current market dynamics where relevant\r\n\r\n\uD83C\uDFA8 STRUCTURE GUIDELINES:\r\n1. Compelling title with problem/solution angle\r\n2. Quick value proposition (why this matters now)\r\n3. Core concept breakdown with examples\r\n4. ${market.charAt(0).toUpperCase() + market.slice(1)}-specific applications\r\n5. Implementation roadmap with specific steps\r\n6. Risk management considerations\r\n7. Advanced tips from professional perspective\r\n8. Actionable next steps\r\n\r\n\uD83D\uDCA1 MAKE IT PRACTICAL:\r\n- Include specific numbers and percentages\r\n- Provide exact timeframes and conditions\r\n- Give real trading scenarios\r\n- Mention specific tools and indicators relevant to ${market}\r\n- Address psychological aspects of implementing ${subject}\r\n\r\nRemember: This should be professional-grade content that traders can immediately apply to improve their ${market} trading results.`;\r\n\r\n          let content = '';\r\n          if (env.OPENROUTER_API_KEY) {\r\n            try {\r\n              content = await generateTextWithOpenRouter(prompt, env.OPENROUTER_API_KEY, model);\r\n              if (!content) {\r\n                throw new Error('No content generated');\r\n              }\r\n              \r\n              // Additional formatting for Telegram\r\n              content = content\r\n                .replace(/\\n\\s*\\n/g, '\\n\\n') // Standardize spacing\r\n                .replace(/\u2022/g, '\u2022') // Standardize bullet points\r\n                .replace(/---/g, '\\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n') // Nice dividers\r\n                .replace(/\\*(.*?)\\*/g, '<b>$1</b>') // Convert *text* to <b>text</b>\r\n                .replace(/_(.*?)_/g, '<i>$1</i>') // Convert _text_ to <i>text</i>\r\n                .replace(/~(.*?)~/g, '<u>$1</u>'); // Convert ~text~ to <u>text</u>\r\n              \r\n              // Sanitize for Telegram HTML parsing\r\n              content = sanitizeForTelegram(content);\r\n            } catch (aiError) {\r\n              console.error('AI generation error:', aiError);\r\n              // No fallback - return error\r\n              return new Response(JSON.stringify({ \r\n                error: 'AI API not working: ' + (aiError.message || 'Unknown error')\r\n              }), {\r\n                status: 500,\r\n                headers: { 'Content-Type': 'application/json' }\r\n              });\r\n            }\r\n          } else {\r\n            // No API key - return error\r\n            return new Response(JSON.stringify({ \r\n              error: 'OpenRouter API key not configured' \r\n            }), {\r\n              status: 400,\r\n              headers: { 'Content-Type': 'application/json' }\r\n            });\r\n          }\r\n\r\n          return new Response(JSON.stringify({ content }), {\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        } catch (error) {\r\n          console.error('Generation error:', error);\r\n          return new Response(JSON.stringify({ \r\n            error: 'Failed to generate content: ' + (error.message || 'Unknown error') \r\n          }), {\r\n            status: 500,\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        }\r\n      }\r\n\r\n      if (path === '/api/post' && request.method === 'POST') {\r\n        try {\r\n          const { content } = await request.json();\r\n          if (!content) {\r\n            console.error('No content provided in request body');\r\n            return new Response(JSON.stringify({ error: 'No content provided' }), {\r\n              status: 400,\r\n              headers: { 'Content-Type': 'application/json' }\r\n            });\r\n          }\r\n\r\n          if (!env.TELEGRAM_BOT_TOKEN || !env.TELEGRAM_CHAT_ID) {\r\n            console.error('Missing Telegram configuration:', {\r\n              hasToken: !!env.TELEGRAM_BOT_TOKEN,\r\n              hasChatId: !!env.TELEGRAM_CHAT_ID,\r\n              tokenLength: env.TELEGRAM_BOT_TOKEN?.length || 0,\r\n              chatId: env.TELEGRAM_CHAT_ID\r\n            });\r\n            return new Response(JSON.stringify({ \r\n              error: 'Telegram configuration missing. Please set TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID environment variables.' \r\n            }), {\r\n              status: 500,\r\n              headers: { 'Content-Type': 'application/json' }\r\n            });\r\n          }\r\n\r\n          console.log('Manual post attempt...', {\r\n            contentLength: content.length,\r\n            hasToken: !!env.TELEGRAM_BOT_TOKEN,\r\n            hasChatId: !!env.TELEGRAM_CHAT_ID,\r\n            tokenPrefix: env.TELEGRAM_BOT_TOKEN?.substring(0, 10) + '...',\r\n            chatId: env.TELEGRAM_CHAT_ID\r\n          });\r\n\r\n          // Sanitize content first\r\n          let finalContent = sanitizeForTelegram(content);\r\n          \r\n          // Add footer to manual posts too\r\n          const footer = await getPostFooter(env);\r\n          if (footer.enabled) {\r\n            const footerText = `\\n\\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n\uD83D\uDCC8 <b>${footer.companyName || 'TradingBot Pro'}</b>\\n\uD83D\uDCF1 ${footer.telegramChannel || '@tradingbot'}\\n\uD83C\uDF10 ${footer.website || 'tradingbot.com'}\\n\\n#TradingEducation\\n\\n<i>~ Your Trading Mentor</i> \u270D\uFE0F`;\r\n            finalContent += footerText;\r\n          }\r\n\r\n          // Ensure content is within limits\r\n          if (finalContent.length > 1020) {\r\n            finalContent = finalContent.slice(0, 1000) + '...\\n\\n' + (footer.enabled ? `\uD83D\uDCC8 <b>${footer.companyName || 'TradingBot Pro'}</b>\\n\\n<i>~ Your Trading Mentor</i> \u270D\uFE0F` : '');\r\n          }\r\n\r\n          const imgUrl = getUnsplashImageUrl(['trading', 'finance']);\r\n          const result = await postToTelegram(env.TELEGRAM_BOT_TOKEN, env.TELEGRAM_CHAT_ID, finalContent, imgUrl);\r\n          \r\n          console.log('Manual post successful');\r\n          await updatePostingStats(env, true);\r\n          \r\n          return new Response(JSON.stringify({ success: true, result }), {\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        } catch (error) {\r\n          console.error('Manual post error:', {\r\n            message: error.message,\r\n            stack: error.stack,\r\n            name: error.name\r\n          });\r\n          await updatePostingStats(env, false);\r\n          return new Response(JSON.stringify({ \r\n            error: error.message,\r\n            details: error.stack \r\n          }), {\r\n            status: 500,\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        }\r\n      }\r\n\r\n      // Queue management endpoints\r\n      if (path === '/api/queue' && request.method === 'GET') {\r\n        try {\r\n          const queue = await getSubjectsQueue(env);\r\n          return new Response(JSON.stringify({ queue }), {\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        } catch (error) {\r\n          return new Response(JSON.stringify({ error: error.message }), {\r\n            status: 500,\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        }\r\n      }\r\n\r\n      if (path === '/api/queue' && request.method === 'POST') {\r\n        try {\r\n          const { subject, market } = await request.json();\r\n          if (!subject) {\r\n            return new Response(JSON.stringify({ error: 'Subject is required' }), {\r\n              status: 400,\r\n              headers: { 'Content-Type': 'application/json' }\r\n            });\r\n          }\r\n          \r\n          const newItem = await addSubjectToQueue(env, subject, market || 'crypto');\r\n          return new Response(JSON.stringify({ success: true, item: newItem }), {\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        } catch (error) {\r\n          return new Response(JSON.stringify({ error: error.message }), {\r\n            status: 500,\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        }\r\n      }\r\n\r\n      if (path.startsWith('/api/queue/') && request.method === 'DELETE') {\r\n        try {\r\n          const subjectId = path.split('/').pop();\r\n          if (subjectId === 'clear') {\r\n            // Clear entire queue\r\n            await saveSubjectsQueue(env, []);\r\n          } else {\r\n            await removeSubjectFromQueue(env, subjectId);\r\n          }\r\n          return new Response(JSON.stringify({ success: true }), {\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        } catch (error) {\r\n          return new Response(JSON.stringify({ error: error.message }), {\r\n            status: 500,\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        }\r\n      }\r\n\r\n      // Stats endpoint\r\n      if (path === '/api/stats' && request.method === 'GET') {\r\n        try {\r\n          const stats = await getPostingStats(env);\r\n          return new Response(JSON.stringify({ stats }), {\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        } catch (error) {\r\n          return new Response(JSON.stringify({ error: error.message }), {\r\n            status: 500,\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        }\r\n      }\r\n\r\n      // Footer management endpoints\r\n      if (path === '/api/footer' && request.method === 'GET') {\r\n        try {\r\n          const footer = await getPostFooter(env);\r\n          return new Response(JSON.stringify({ footer }), {\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        } catch (error) {\r\n          return new Response(JSON.stringify({ error: error.message }), {\r\n            status: 500,\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        }\r\n      }\r\n\r\n      if (path === '/api/footer' && request.method === 'POST') {\r\n        try {\r\n          const { footer } = await request.json();\r\n          await savePostFooter(env, footer);\r\n          return new Response(JSON.stringify({ success: true }), {\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        } catch (error) {\r\n          return new Response(JSON.stringify({ error: error.message }), {\r\n            status: 500,\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        }\r\n      }\r\n\r\n      // Debug endpoint\r\n      if (path === '/api/debug' && request.method === 'GET') {\r\n        try {\r\n          const debugInfo = {\r\n            timestamp: new Date().toISOString(),\r\n            environment: {\r\n              hasBotToken: !!env.TELEGRAM_BOT_TOKEN,\r\n              botTokenLength: env.TELEGRAM_BOT_TOKEN?.length || 0,\r\n              botTokenFormat: env.TELEGRAM_BOT_TOKEN ? \r\n                (env.TELEGRAM_BOT_TOKEN.includes(':') ? 'Valid format' : 'Invalid format (missing colon)') : \r\n                'Not set',\r\n              hasChatId: !!env.TELEGRAM_CHAT_ID,\r\n              chatId: env.TELEGRAM_CHAT_ID || 'Not set',\r\n              chatIdType: env.TELEGRAM_CHAT_ID ? \r\n                (env.TELEGRAM_CHAT_ID.toString().startsWith('-') ? 'Group/Channel' : \r\n                 env.TELEGRAM_CHAT_ID.toString().startsWith('@') ? 'Username' : 'Private chat') : 'Not set',\r\n              hasOpenRouterKey: !!env.OPENROUTER_API_KEY,\r\n              openRouterKeyLength: env.OPENROUTER_API_KEY?.length || 0\r\n            },\r\n            validation: {\r\n              botTokenValid: env.TELEGRAM_BOT_TOKEN && \r\n                           env.TELEGRAM_BOT_TOKEN.includes(':') && \r\n                           env.TELEGRAM_BOT_TOKEN.length > 40,\r\n              chatIdValid: env.TELEGRAM_CHAT_ID && \r\n                          env.TELEGRAM_CHAT_ID.toString().match(/^(-?\\d+|@\\w+)$/),\r\n              configurationComplete: !!(env.TELEGRAM_BOT_TOKEN && env.TELEGRAM_CHAT_ID)\r\n            }\r\n          };\r\n\r\n          return new Response(JSON.stringify(debugInfo), {\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        } catch (error) {\r\n          return new Response(JSON.stringify({ \r\n            error: 'Debug check failed',\r\n            details: error.message \r\n          }), {\r\n            status: 500,\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        }\r\n      }\r\n\r\n      // Test post endpoint\r\n      if (path === '/api/test-post' && request.method === 'POST') {\r\n        try {\r\n          console.log('=== TEST POST STARTED ===');\r\n          console.log('Timestamp:', new Date().toISOString());\r\n          \r\n          // Environment check\r\n          console.log('Environment check:');\r\n          console.log('- TELEGRAM_BOT_TOKEN exists:', !!env.TELEGRAM_BOT_TOKEN);\r\n          console.log('- TELEGRAM_BOT_TOKEN length:', env.TELEGRAM_BOT_TOKEN?.length || 0);\r\n          console.log('- TELEGRAM_BOT_TOKEN format check:', env.TELEGRAM_BOT_TOKEN?.includes(':') ? 'PASS' : 'FAIL');\r\n          console.log('- TELEGRAM_CHAT_ID exists:', !!env.TELEGRAM_CHAT_ID);\r\n          console.log('- TELEGRAM_CHAT_ID value:', env.TELEGRAM_CHAT_ID);\r\n          console.log('- OPENROUTER_API_KEY exists:', !!env.OPENROUTER_API_KEY);\r\n          \r\n          if (!env.TELEGRAM_BOT_TOKEN) {\r\n            const error = 'TELEGRAM_BOT_TOKEN environment variable is not set. Please configure it using: wrangler secret put TELEGRAM_BOT_TOKEN';\r\n            console.error('CRITICAL ERROR:', error);\r\n            throw new Error(error);\r\n          }\r\n          \r\n          if (!env.TELEGRAM_BOT_TOKEN.includes(':')) {\r\n            const error = 'TELEGRAM_BOT_TOKEN format is invalid. It should look like: 123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11';\r\n            console.error('CRITICAL ERROR:', error);\r\n            throw new Error(error);\r\n          }\r\n          \r\n          if (!env.TELEGRAM_CHAT_ID) {\r\n            const error = 'TELEGRAM_CHAT_ID environment variable is not set. Please configure it using: wrangler secret put TELEGRAM_CHAT_ID';\r\n            console.error('CRITICAL ERROR:', error);\r\n            throw new Error(error);\r\n          }\r\n          \r\n          console.log('Environment validation passed, proceeding with test post...');\r\n          const result = await buildAndSend(env);\r\n          console.log('=== TEST POST COMPLETED SUCCESSFULLY ===');\r\n          \r\n          return new Response(JSON.stringify({ \r\n            success: true, \r\n            result,\r\n            message: 'Test post sent successfully!'\r\n          }), {\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        } catch (error) {\r\n          console.error('=== TEST POST FAILED ===');\r\n          console.error('Error name:', error.name);\r\n          console.error('Error message:', error.message);\r\n          console.error('Error stack:', error.stack);\r\n          \r\n          await updatePostingStats(env, false);\r\n          return new Response(JSON.stringify({ \r\n            error: error.message,\r\n            details: error.stack,\r\n            timestamp: new Date().toISOString()\r\n          }), {\r\n            status: 500,\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        }\r\n      }\r\n\r\n      // Return 404 for unknown API endpoints\r\n      return new Response('Not Found', { status: 404 });\r\n    }\r\n\r\n    // Return 404 for unknown paths\r\n    return new Response('Not Found', { status: 404 });\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
